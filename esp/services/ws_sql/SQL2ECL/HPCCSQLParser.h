/** \file
 *  This C header file was generated by $ANTLR version 3.4
 *
 *     -  From the grammar source file : /home/hpccuser/GIT/wssql/esp/services/ws_sql/SQL2ECL/ANTLR3c/HPCCSQL.g
 *     -                            On : 2016-10-20 15:48:59
 *     -                for the parser : HPCCSQLParserParser
 *
 * Editing it, at least manually, is not wise.
 *
 * C language generator and runtime by Jim Idle, jimi|hereisanat|idle|dotgoeshere|ws.
 *
 *
 * The parser 
HPCCSQLParser

has the callable functions (rules) shown below,
 * which will invoke the code for the associated rule in the source grammar
 * assuming that the input stream is pointing to a token/text stream that could begin
 * this rule.
 *
 * For instance if you call the first (topmost) rule in a parser grammar, you will
 * get the results of a full parse, but calling a rule half way through the grammar will
 * allow you to pass part of a full token stream to the parser, such as for syntax checking
 * in editors and so on.
 *
 * The parser entry points are called indirectly (by function pointer to function) via
 * a parser context typedef pHPCCSQLParser, which is returned from a call to HPCCSQLParserNew().
 *
 * The methods in pHPCCSQLParser are  as follows:
 *
 *  - 
 HPCCSQLParser_quoted_id_return
      pHPCCSQLParser->quoted_id(pHPCCSQLParser)
 *  - 
 HPCCSQLParser_quoted_table_id_return
      pHPCCSQLParser->quoted_table_id(pHPCCSQLParser)
 *  - 
 HPCCSQLParser_relational_op_return
      pHPCCSQLParser->relational_op(pHPCCSQLParser)
 *  - 
 HPCCSQLParser_list_op_return
      pHPCCSQLParser->list_op(pHPCCSQLParser)
 *  - 
 HPCCSQLParser_string_literal_return
      pHPCCSQLParser->string_literal(pHPCCSQLParser)
 *  - 
 HPCCSQLParser_number_literal_return
      pHPCCSQLParser->number_literal(pHPCCSQLParser)
 *  - 
 HPCCSQLParser_hex_literal_return
      pHPCCSQLParser->hex_literal(pHPCCSQLParser)
 *  - 
 HPCCSQLParser_boolean_literal_return
      pHPCCSQLParser->boolean_literal(pHPCCSQLParser)
 *  - 
 HPCCSQLParser_bit_literal_return
      pHPCCSQLParser->bit_literal(pHPCCSQLParser)
 *  - 
 HPCCSQLParser_literal_value_return
      pHPCCSQLParser->literal_value(pHPCCSQLParser)
 *  - 
 HPCCSQLParser_functionList_return
      pHPCCSQLParser->functionList(pHPCCSQLParser)
 *  - 
 HPCCSQLParser_char_functions_return
      pHPCCSQLParser->char_functions(pHPCCSQLParser)
 *  - 
 HPCCSQLParser_group_functions_return
      pHPCCSQLParser->group_functions(pHPCCSQLParser)
 *  - 
 HPCCSQLParser_query_set_name_return
      pHPCCSQLParser->query_set_name(pHPCCSQLParser)
 *  - 
 HPCCSQLParser_schema_name_return
      pHPCCSQLParser->schema_name(pHPCCSQLParser)
 *  - 
 HPCCSQLParser_table_name_return
      pHPCCSQLParser->table_name(pHPCCSQLParser)
 *  - 
 HPCCSQLParser_quoted_table_name_return
      pHPCCSQLParser->quoted_table_name(pHPCCSQLParser)
 *  - 
 HPCCSQLParser_engine_name_return
      pHPCCSQLParser->engine_name(pHPCCSQLParser)
 *  - 
 HPCCSQLParser_column_name_return
      pHPCCSQLParser->column_name(pHPCCSQLParser)
 *  - 
 HPCCSQLParser_quoted_column_name_return
      pHPCCSQLParser->quoted_column_name(pHPCCSQLParser)
 *  - 
 HPCCSQLParser_index_name_return
      pHPCCSQLParser->index_name(pHPCCSQLParser)
 *  - 
 HPCCSQLParser_user_name_return
      pHPCCSQLParser->user_name(pHPCCSQLParser)
 *  - 
 HPCCSQLParser_function_name_return
      pHPCCSQLParser->function_name(pHPCCSQLParser)
 *  - 
 HPCCSQLParser_procedure_name_return
      pHPCCSQLParser->procedure_name(pHPCCSQLParser)
 *  - 
 HPCCSQLParser_alias_return
      pHPCCSQLParser->alias(pHPCCSQLParser)
 *  - 
 HPCCSQLParser_column_spec_return
      pHPCCSQLParser->column_spec(pHPCCSQLParser)
 *  - 
 HPCCSQLParser_expression_list_return
      pHPCCSQLParser->expression_list(pHPCCSQLParser)
 *  - 
 HPCCSQLParser_expression_return
      pHPCCSQLParser->expression(pHPCCSQLParser)
 *  - 
 HPCCSQLParser_orExpression_return
      pHPCCSQLParser->orExpression(pHPCCSQLParser)
 *  - 
 HPCCSQLParser_andExpression_return
      pHPCCSQLParser->andExpression(pHPCCSQLParser)
 *  - 
 HPCCSQLParser_relationalExpression_return
      pHPCCSQLParser->relationalExpression(pHPCCSQLParser)
 *  - 
 HPCCSQLParser_additionExpression_return
      pHPCCSQLParser->additionExpression(pHPCCSQLParser)
 *  - 
 HPCCSQLParser_multiplyExpression_return
      pHPCCSQLParser->multiplyExpression(pHPCCSQLParser)
 *  - 
 HPCCSQLParser_listExpression_return
      pHPCCSQLParser->listExpression(pHPCCSQLParser)
 *  - 
 HPCCSQLParser_unaryExpression_return
      pHPCCSQLParser->unaryExpression(pHPCCSQLParser)
 *  - 
 HPCCSQLParser_simpleExpression_return
      pHPCCSQLParser->simpleExpression(pHPCCSQLParser)
 *  - 
 HPCCSQLParser_parenExpression_return
      pHPCCSQLParser->parenExpression(pHPCCSQLParser)
 *  - 
 HPCCSQLParser_literalExpressionList_return
      pHPCCSQLParser->literalExpressionList(pHPCCSQLParser)
 *  - 
 HPCCSQLParser_literalOrPlaceholderExpressionList_return
      pHPCCSQLParser->literalOrPlaceholderExpressionList(pHPCCSQLParser)
 *  - 
 HPCCSQLParser_literalOrPlaceholderValue_return
      pHPCCSQLParser->literalOrPlaceholderValue(pHPCCSQLParser)
 *  - 
 HPCCSQLParser_function_call_return
      pHPCCSQLParser->function_call(pHPCCSQLParser)
 *  - 
 HPCCSQLParser_functionParam_return
      pHPCCSQLParser->functionParam(pHPCCSQLParser)
 *  - 
 HPCCSQLParser_parameterPlaceHolder_return
      pHPCCSQLParser->parameterPlaceHolder(pHPCCSQLParser)
 *  - 
 HPCCSQLParser_userVariable_return
      pHPCCSQLParser->userVariable(pHPCCSQLParser)
 *  - 
 HPCCSQLParser_table_references_return
      pHPCCSQLParser->table_references(pHPCCSQLParser)
 *  - 
 HPCCSQLParser_table_reference_return
      pHPCCSQLParser->table_reference(pHPCCSQLParser)
 *  - 
 HPCCSQLParser_table_list_return
      pHPCCSQLParser->table_list(pHPCCSQLParser)
 *  - 
 HPCCSQLParser_jointable_return
      pHPCCSQLParser->jointable(pHPCCSQLParser)
 *  - 
 HPCCSQLParser_table_factor1_return
      pHPCCSQLParser->table_factor1(pHPCCSQLParser)
 *  - 
 HPCCSQLParser_table_factor2_return
      pHPCCSQLParser->table_factor2(pHPCCSQLParser)
 *  - 
 HPCCSQLParser_table_factor3_return
      pHPCCSQLParser->table_factor3(pHPCCSQLParser)
 *  - 
 HPCCSQLParser_table_atom_return
      pHPCCSQLParser->table_atom(pHPCCSQLParser)
 *  - 
 HPCCSQLParser_join_condition_return
      pHPCCSQLParser->join_condition(pHPCCSQLParser)
 *  - 
 HPCCSQLParser_index_hint_return
      pHPCCSQLParser->index_hint(pHPCCSQLParser)
 *  - 
 HPCCSQLParser_root_statement_return
      pHPCCSQLParser->root_statement(pHPCCSQLParser)
 *  - 
 HPCCSQLParser_data_manipulation_statements_return
      pHPCCSQLParser->data_manipulation_statements(pHPCCSQLParser)
 *  - 
 HPCCSQLParser_create_index_statement_return
      pHPCCSQLParser->create_index_statement(pHPCCSQLParser)
 *  - 
 HPCCSQLParser_create_load_table_statement_return
      pHPCCSQLParser->create_load_table_statement(pHPCCSQLParser)
 *  - 
 HPCCSQLParser_table_options_return
      pHPCCSQLParser->table_options(pHPCCSQLParser)
 *  - 
 HPCCSQLParser_table_option_return
      pHPCCSQLParser->table_option(pHPCCSQLParser)
 *  - 
 HPCCSQLParser_create_table_statement_return
      pHPCCSQLParser->create_table_statement(pHPCCSQLParser)
 *  - 
 HPCCSQLParser_create_table_columns_definition_return
      pHPCCSQLParser->create_table_columns_definition(pHPCCSQLParser)
 *  - 
 HPCCSQLParser_create_definition_return
      pHPCCSQLParser->create_definition(pHPCCSQLParser)
 *  - 
 HPCCSQLParser_length_and_or_precision_definition_return
      pHPCCSQLParser->length_and_or_precision_definition(pHPCCSQLParser)
 *  - 
 HPCCSQLParser_length_and_precision_definition_return
      pHPCCSQLParser->length_and_precision_definition(pHPCCSQLParser)
 *  - 
 HPCCSQLParser_length_definition_return
      pHPCCSQLParser->length_definition(pHPCCSQLParser)
 *  - 
 HPCCSQLParser_text_params_return
      pHPCCSQLParser->text_params(pHPCCSQLParser)
 *  - 
 HPCCSQLParser_column_definition_return
      pHPCCSQLParser->column_definition(pHPCCSQLParser)
 *  - 
 HPCCSQLParser_charset_declaration_return
      pHPCCSQLParser->charset_declaration(pHPCCSQLParser)
 *  - 
 HPCCSQLParser_charset_name_return
      pHPCCSQLParser->charset_name(pHPCCSQLParser)
 *  - 
 HPCCSQLParser_file_data_format_type_options_return
      pHPCCSQLParser->file_data_format_type_options(pHPCCSQLParser)
 *  - 
 HPCCSQLParser_file_data_format_type_return
      pHPCCSQLParser->file_data_format_type(pHPCCSQLParser)
 *  - 
 HPCCSQLParser_file_data_format_declaration_return
      pHPCCSQLParser->file_data_format_declaration(pHPCCSQLParser)
 *  - 
 HPCCSQLParser_variable_data_line_terminator_return
      pHPCCSQLParser->variable_data_line_terminator(pHPCCSQLParser)
 *  - 
 HPCCSQLParser_variable_data_field_terminator_return
      pHPCCSQLParser->variable_data_field_terminator(pHPCCSQLParser)
 *  - 
 HPCCSQLParser_variable_data_escaped_return
      pHPCCSQLParser->variable_data_escaped(pHPCCSQLParser)
 *  - 
 HPCCSQLParser_variable_data_enclosed_return
      pHPCCSQLParser->variable_data_enclosed(pHPCCSQLParser)
 *  - 
 HPCCSQLParser_variable_data_format_declaration_field_return
      pHPCCSQLParser->variable_data_format_declaration_field(pHPCCSQLParser)
 *  - 
 HPCCSQLParser_variable_data_format_declaration_line_return
      pHPCCSQLParser->variable_data_format_declaration_line(pHPCCSQLParser)
 *  - 
 HPCCSQLParser_landing_zone_information_return
      pHPCCSQLParser->landing_zone_information(pHPCCSQLParser)
 *  - 
 HPCCSQLParser_load_table_statement_return
      pHPCCSQLParser->load_table_statement(pHPCCSQLParser)
 *  - 
 HPCCSQLParser_select_statement_return
      pHPCCSQLParser->select_statement(pHPCCSQLParser)
 *  - 
 HPCCSQLParser_select_portion_return
      pHPCCSQLParser->select_portion(pHPCCSQLParser)
 *  - 
 HPCCSQLParser_from_portion_return
      pHPCCSQLParser->from_portion(pHPCCSQLParser)
 *  - 
 HPCCSQLParser_where_clause_return
      pHPCCSQLParser->where_clause(pHPCCSQLParser)
 *  - 
 HPCCSQLParser_groupby_clause_return
      pHPCCSQLParser->groupby_clause(pHPCCSQLParser)
 *  - 
 HPCCSQLParser_having_clause_return
      pHPCCSQLParser->having_clause(pHPCCSQLParser)
 *  - 
 HPCCSQLParser_orderby_clause_return
      pHPCCSQLParser->orderby_clause(pHPCCSQLParser)
 *  - 
 HPCCSQLParser_orderby_item_return
      pHPCCSQLParser->orderby_item(pHPCCSQLParser)
 *  - 
 HPCCSQLParser_limit_clause_return
      pHPCCSQLParser->limit_clause(pHPCCSQLParser)
 *  - 
 HPCCSQLParser_length_return
      pHPCCSQLParser->length(pHPCCSQLParser)
 *  - 
 HPCCSQLParser_offset_return
      pHPCCSQLParser->offset(pHPCCSQLParser)
 *  - 
 HPCCSQLParser_row_count_return
      pHPCCSQLParser->row_count(pHPCCSQLParser)
 *  - 
 HPCCSQLParser_select_list_return
      pHPCCSQLParser->select_list(pHPCCSQLParser)
 *  - 
 HPCCSQLParser_select_item_return
      pHPCCSQLParser->select_item(pHPCCSQLParser)
 *  - 
 HPCCSQLParser_column_list_return
      pHPCCSQLParser->column_list(pHPCCSQLParser)
 *  - 
 HPCCSQLParser_subquery_return
      pHPCCSQLParser->subquery(pHPCCSQLParser)
 *  - 
 HPCCSQLParser_table_spec_return
      pHPCCSQLParser->table_spec(pHPCCSQLParser)
 *  - 
 HPCCSQLParser_table_fork_return
      pHPCCSQLParser->table_fork(pHPCCSQLParser)
 *  - 
 HPCCSQLParser_schema_spec_return
      pHPCCSQLParser->schema_spec(pHPCCSQLParser)
 *  - 
 HPCCSQLParser_column_wildcard_return
      pHPCCSQLParser->column_wildcard(pHPCCSQLParser)
 *  - 
 HPCCSQLParser_callParam_return
      pHPCCSQLParser->callParam(pHPCCSQLParser)
 *  - 
 HPCCSQLParser_call_procedure_name_part_return
      pHPCCSQLParser->call_procedure_name_part(pHPCCSQLParser)
 *  - 
 HPCCSQLParser_call_procedure_params_return
      pHPCCSQLParser->call_procedure_params(pHPCCSQLParser)
 *  - 
 HPCCSQLParser_call_statement_return
      pHPCCSQLParser->call_statement(pHPCCSQLParser)
 * 
 * 
 *
 * The return type for any particular rule is of course determined by the source
 * grammar file.
 */
// [The "BSD license"]
// Copyright (c) 2005-2009 Jim Idle, Temporal Wave LLC
// http://www.temporal-wave.com
// http://www.linkedin.com/in/jimidle
//
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
// 1. Redistributions of source code must retain the above copyright
//    notice, this list of conditions and the following disclaimer.
// 2. Redistributions in binary form must reproduce the above copyright
//    notice, this list of conditions and the following disclaimer in the
//    documentation and/or other materials provided with the distribution.
// 3. The name of the author may not be used to endorse or promote products
//    derived from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
// IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
// OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
// IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
// INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
// NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
// THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

#ifndef	_HPCCSQLParser_H
#define _HPCCSQLParser_H
/* =============================================================================
 * Standard antlr3 C runtime definitions
 */
#include    <antlr3.h>

/* End of standard antlr 3 runtime definitions
 * =============================================================================
 */

#ifdef __cplusplus
extern "C" {
#endif

// Forward declare the context typedef so that we can use it before it is
// properly defined. Delegators and delegates (from import statements) are
// interdependent and their context structures contain pointers to each other
// C only allows such things to be declared if you pre-declare the typedef.
//
typedef struct HPCCSQLParser_Ctx_struct HPCCSQLParser, * pHPCCSQLParser;





#ifdef	ANTLR3_WINDOWS
// Disable: Unreferenced parameter,							- Rules with parameters that are not used
//          constant conditional,							- ANTLR realizes that a prediction is always true (synpred usually)
//          initialized but unused variable					- tree rewrite variables declared but not needed
//          Unreferenced local variable						- lexer rule declares but does not always use _type
//          potentially unitialized variable used			- retval always returned from a rule
//			unreferenced local function has been removed	- susually getTokenNames or freeScope, they can go without warnigns
//
// These are only really displayed at warning level /W4 but that is the code ideal I am aiming at
// and the codegen must generate some of these warnings by necessity, apart from 4100, which is
// usually generated when a parser rule is given a parameter that it does not use. Mostly though
// this is a matter of orthogonality hence I disable that one.
//
#pragma warning( disable : 4100 )
#pragma warning( disable : 4101 )
#pragma warning( disable : 4127 )
#pragma warning( disable : 4189 )
#pragma warning( disable : 4505 )
#pragma warning( disable : 4701 )
#endif

/* ========================
 * BACKTRACKING IS ENABLED
 * ========================
 */

typedef struct HPCCSQLParser_quoted_id_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    HPCCSQLParser_quoted_id_return;



typedef struct HPCCSQLParser_quoted_table_id_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    HPCCSQLParser_quoted_table_id_return;



typedef struct HPCCSQLParser_relational_op_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    HPCCSQLParser_relational_op_return;



typedef struct HPCCSQLParser_list_op_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    HPCCSQLParser_list_op_return;



typedef struct HPCCSQLParser_string_literal_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    HPCCSQLParser_string_literal_return;



typedef struct HPCCSQLParser_number_literal_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    HPCCSQLParser_number_literal_return;



typedef struct HPCCSQLParser_hex_literal_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    HPCCSQLParser_hex_literal_return;



typedef struct HPCCSQLParser_boolean_literal_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    HPCCSQLParser_boolean_literal_return;



typedef struct HPCCSQLParser_bit_literal_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    HPCCSQLParser_bit_literal_return;



typedef struct HPCCSQLParser_literal_value_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    HPCCSQLParser_literal_value_return;



typedef struct HPCCSQLParser_functionList_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    HPCCSQLParser_functionList_return;



typedef struct HPCCSQLParser_char_functions_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    HPCCSQLParser_char_functions_return;



typedef struct HPCCSQLParser_group_functions_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    HPCCSQLParser_group_functions_return;



typedef struct HPCCSQLParser_query_set_name_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    HPCCSQLParser_query_set_name_return;



typedef struct HPCCSQLParser_schema_name_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    HPCCSQLParser_schema_name_return;



typedef struct HPCCSQLParser_table_name_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    HPCCSQLParser_table_name_return;



typedef struct HPCCSQLParser_quoted_table_name_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    HPCCSQLParser_quoted_table_name_return;



typedef struct HPCCSQLParser_engine_name_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    HPCCSQLParser_engine_name_return;



typedef struct HPCCSQLParser_column_name_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    HPCCSQLParser_column_name_return;



typedef struct HPCCSQLParser_quoted_column_name_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    HPCCSQLParser_quoted_column_name_return;



typedef struct HPCCSQLParser_index_name_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    HPCCSQLParser_index_name_return;



typedef struct HPCCSQLParser_user_name_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    HPCCSQLParser_user_name_return;



typedef struct HPCCSQLParser_function_name_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    HPCCSQLParser_function_name_return;



typedef struct HPCCSQLParser_procedure_name_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    HPCCSQLParser_procedure_name_return;



typedef struct HPCCSQLParser_alias_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    HPCCSQLParser_alias_return;



typedef struct HPCCSQLParser_column_spec_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    HPCCSQLParser_column_spec_return;



typedef struct HPCCSQLParser_expression_list_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    HPCCSQLParser_expression_list_return;



typedef struct HPCCSQLParser_expression_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    HPCCSQLParser_expression_return;



typedef struct HPCCSQLParser_orExpression_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    HPCCSQLParser_orExpression_return;



typedef struct HPCCSQLParser_andExpression_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    HPCCSQLParser_andExpression_return;



typedef struct HPCCSQLParser_relationalExpression_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    HPCCSQLParser_relationalExpression_return;



typedef struct HPCCSQLParser_additionExpression_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    HPCCSQLParser_additionExpression_return;



typedef struct HPCCSQLParser_multiplyExpression_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    HPCCSQLParser_multiplyExpression_return;



typedef struct HPCCSQLParser_listExpression_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    HPCCSQLParser_listExpression_return;



typedef struct HPCCSQLParser_unaryExpression_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    HPCCSQLParser_unaryExpression_return;



typedef struct HPCCSQLParser_simpleExpression_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    HPCCSQLParser_simpleExpression_return;



typedef struct HPCCSQLParser_parenExpression_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    HPCCSQLParser_parenExpression_return;



typedef struct HPCCSQLParser_literalExpressionList_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    HPCCSQLParser_literalExpressionList_return;



typedef struct HPCCSQLParser_literalOrPlaceholderExpressionList_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    HPCCSQLParser_literalOrPlaceholderExpressionList_return;



typedef struct HPCCSQLParser_literalOrPlaceholderValue_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    HPCCSQLParser_literalOrPlaceholderValue_return;



typedef struct HPCCSQLParser_function_call_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    HPCCSQLParser_function_call_return;



typedef struct HPCCSQLParser_functionParam_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    HPCCSQLParser_functionParam_return;



typedef struct HPCCSQLParser_parameterPlaceHolder_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    HPCCSQLParser_parameterPlaceHolder_return;



typedef struct HPCCSQLParser_userVariable_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    HPCCSQLParser_userVariable_return;



typedef struct HPCCSQLParser_table_references_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    HPCCSQLParser_table_references_return;



typedef struct HPCCSQLParser_table_reference_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    HPCCSQLParser_table_reference_return;



typedef struct HPCCSQLParser_table_list_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    HPCCSQLParser_table_list_return;



typedef struct HPCCSQLParser_jointable_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    HPCCSQLParser_jointable_return;



typedef struct HPCCSQLParser_table_factor1_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    HPCCSQLParser_table_factor1_return;



typedef struct HPCCSQLParser_table_factor2_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    HPCCSQLParser_table_factor2_return;



typedef struct HPCCSQLParser_table_factor3_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    HPCCSQLParser_table_factor3_return;



typedef struct HPCCSQLParser_table_atom_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    HPCCSQLParser_table_atom_return;



typedef struct HPCCSQLParser_join_condition_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    HPCCSQLParser_join_condition_return;



typedef struct HPCCSQLParser_index_hint_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    HPCCSQLParser_index_hint_return;



typedef struct HPCCSQLParser_root_statement_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    HPCCSQLParser_root_statement_return;



typedef struct HPCCSQLParser_data_manipulation_statements_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    HPCCSQLParser_data_manipulation_statements_return;



typedef struct HPCCSQLParser_create_index_statement_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    HPCCSQLParser_create_index_statement_return;



typedef struct HPCCSQLParser_create_load_table_statement_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    HPCCSQLParser_create_load_table_statement_return;



typedef struct HPCCSQLParser_table_options_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    HPCCSQLParser_table_options_return;



typedef struct HPCCSQLParser_table_option_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    HPCCSQLParser_table_option_return;



typedef struct HPCCSQLParser_create_table_statement_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    HPCCSQLParser_create_table_statement_return;



typedef struct HPCCSQLParser_create_table_columns_definition_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    HPCCSQLParser_create_table_columns_definition_return;



typedef struct HPCCSQLParser_create_definition_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    HPCCSQLParser_create_definition_return;



typedef struct HPCCSQLParser_length_and_or_precision_definition_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    HPCCSQLParser_length_and_or_precision_definition_return;



typedef struct HPCCSQLParser_length_and_precision_definition_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    HPCCSQLParser_length_and_precision_definition_return;



typedef struct HPCCSQLParser_length_definition_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    HPCCSQLParser_length_definition_return;



typedef struct HPCCSQLParser_text_params_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    HPCCSQLParser_text_params_return;



typedef struct HPCCSQLParser_column_definition_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    HPCCSQLParser_column_definition_return;



typedef struct HPCCSQLParser_charset_declaration_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    HPCCSQLParser_charset_declaration_return;



typedef struct HPCCSQLParser_charset_name_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    HPCCSQLParser_charset_name_return;



typedef struct HPCCSQLParser_file_data_format_type_options_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    HPCCSQLParser_file_data_format_type_options_return;



typedef struct HPCCSQLParser_file_data_format_type_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    HPCCSQLParser_file_data_format_type_return;



typedef struct HPCCSQLParser_file_data_format_declaration_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    HPCCSQLParser_file_data_format_declaration_return;



typedef struct HPCCSQLParser_variable_data_line_terminator_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    HPCCSQLParser_variable_data_line_terminator_return;



typedef struct HPCCSQLParser_variable_data_field_terminator_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    HPCCSQLParser_variable_data_field_terminator_return;



typedef struct HPCCSQLParser_variable_data_escaped_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    HPCCSQLParser_variable_data_escaped_return;



typedef struct HPCCSQLParser_variable_data_enclosed_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    HPCCSQLParser_variable_data_enclosed_return;



typedef struct HPCCSQLParser_variable_data_format_declaration_field_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    HPCCSQLParser_variable_data_format_declaration_field_return;



typedef struct HPCCSQLParser_variable_data_format_declaration_line_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    HPCCSQLParser_variable_data_format_declaration_line_return;



typedef struct HPCCSQLParser_landing_zone_information_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    HPCCSQLParser_landing_zone_information_return;



typedef struct HPCCSQLParser_load_table_statement_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    HPCCSQLParser_load_table_statement_return;



typedef struct HPCCSQLParser_select_statement_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    HPCCSQLParser_select_statement_return;



typedef struct HPCCSQLParser_select_portion_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    HPCCSQLParser_select_portion_return;



typedef struct HPCCSQLParser_from_portion_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    HPCCSQLParser_from_portion_return;



typedef struct HPCCSQLParser_where_clause_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    HPCCSQLParser_where_clause_return;



typedef struct HPCCSQLParser_groupby_clause_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    HPCCSQLParser_groupby_clause_return;



typedef struct HPCCSQLParser_having_clause_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    HPCCSQLParser_having_clause_return;



typedef struct HPCCSQLParser_orderby_clause_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    HPCCSQLParser_orderby_clause_return;



typedef struct HPCCSQLParser_orderby_item_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    HPCCSQLParser_orderby_item_return;



typedef struct HPCCSQLParser_limit_clause_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    HPCCSQLParser_limit_clause_return;



typedef struct HPCCSQLParser_length_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    HPCCSQLParser_length_return;



typedef struct HPCCSQLParser_offset_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    HPCCSQLParser_offset_return;



typedef struct HPCCSQLParser_row_count_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    HPCCSQLParser_row_count_return;



typedef struct HPCCSQLParser_select_list_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    HPCCSQLParser_select_list_return;



typedef struct HPCCSQLParser_select_item_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    HPCCSQLParser_select_item_return;



typedef struct HPCCSQLParser_column_list_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    HPCCSQLParser_column_list_return;



typedef struct HPCCSQLParser_subquery_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    HPCCSQLParser_subquery_return;



typedef struct HPCCSQLParser_table_spec_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    HPCCSQLParser_table_spec_return;



typedef struct HPCCSQLParser_table_fork_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    HPCCSQLParser_table_fork_return;



typedef struct HPCCSQLParser_schema_spec_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    HPCCSQLParser_schema_spec_return;



typedef struct HPCCSQLParser_column_wildcard_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    HPCCSQLParser_column_wildcard_return;



typedef struct HPCCSQLParser_callParam_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    HPCCSQLParser_callParam_return;



typedef struct HPCCSQLParser_call_procedure_name_part_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    HPCCSQLParser_call_procedure_name_part_return;



typedef struct HPCCSQLParser_call_procedure_params_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    HPCCSQLParser_call_procedure_params_return;



typedef struct HPCCSQLParser_call_statement_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    HPCCSQLParser_call_statement_return;




/** Context tracking structure for 
HPCCSQLParser

 */
struct HPCCSQLParser_Ctx_struct
{
    /** Built in ANTLR3 context tracker contains all the generic elements
     *  required for context tracking.
     */
    pANTLR3_PARSER   pParser;

     HPCCSQLParser_quoted_id_return
     (*quoted_id)	(struct HPCCSQLParser_Ctx_struct * ctx);

     HPCCSQLParser_quoted_table_id_return
     (*quoted_table_id)	(struct HPCCSQLParser_Ctx_struct * ctx);

     HPCCSQLParser_relational_op_return
     (*relational_op)	(struct HPCCSQLParser_Ctx_struct * ctx);

     HPCCSQLParser_list_op_return
     (*list_op)	(struct HPCCSQLParser_Ctx_struct * ctx);

     HPCCSQLParser_string_literal_return
     (*string_literal)	(struct HPCCSQLParser_Ctx_struct * ctx);

     HPCCSQLParser_number_literal_return
     (*number_literal)	(struct HPCCSQLParser_Ctx_struct * ctx);

     HPCCSQLParser_hex_literal_return
     (*hex_literal)	(struct HPCCSQLParser_Ctx_struct * ctx);

     HPCCSQLParser_boolean_literal_return
     (*boolean_literal)	(struct HPCCSQLParser_Ctx_struct * ctx);

     HPCCSQLParser_bit_literal_return
     (*bit_literal)	(struct HPCCSQLParser_Ctx_struct * ctx);

     HPCCSQLParser_literal_value_return
     (*literal_value)	(struct HPCCSQLParser_Ctx_struct * ctx);

     HPCCSQLParser_functionList_return
     (*functionList)	(struct HPCCSQLParser_Ctx_struct * ctx);

     HPCCSQLParser_char_functions_return
     (*char_functions)	(struct HPCCSQLParser_Ctx_struct * ctx);

     HPCCSQLParser_group_functions_return
     (*group_functions)	(struct HPCCSQLParser_Ctx_struct * ctx);

     HPCCSQLParser_query_set_name_return
     (*query_set_name)	(struct HPCCSQLParser_Ctx_struct * ctx);

     HPCCSQLParser_schema_name_return
     (*schema_name)	(struct HPCCSQLParser_Ctx_struct * ctx);

     HPCCSQLParser_table_name_return
     (*table_name)	(struct HPCCSQLParser_Ctx_struct * ctx);

     HPCCSQLParser_quoted_table_name_return
     (*quoted_table_name)	(struct HPCCSQLParser_Ctx_struct * ctx);

     HPCCSQLParser_engine_name_return
     (*engine_name)	(struct HPCCSQLParser_Ctx_struct * ctx);

     HPCCSQLParser_column_name_return
     (*column_name)	(struct HPCCSQLParser_Ctx_struct * ctx);

     HPCCSQLParser_quoted_column_name_return
     (*quoted_column_name)	(struct HPCCSQLParser_Ctx_struct * ctx);

     HPCCSQLParser_index_name_return
     (*index_name)	(struct HPCCSQLParser_Ctx_struct * ctx);

     HPCCSQLParser_user_name_return
     (*user_name)	(struct HPCCSQLParser_Ctx_struct * ctx);

     HPCCSQLParser_function_name_return
     (*function_name)	(struct HPCCSQLParser_Ctx_struct * ctx);

     HPCCSQLParser_procedure_name_return
     (*procedure_name)	(struct HPCCSQLParser_Ctx_struct * ctx);

     HPCCSQLParser_alias_return
     (*alias)	(struct HPCCSQLParser_Ctx_struct * ctx);

     HPCCSQLParser_column_spec_return
     (*column_spec)	(struct HPCCSQLParser_Ctx_struct * ctx);

     HPCCSQLParser_expression_list_return
     (*expression_list)	(struct HPCCSQLParser_Ctx_struct * ctx);

     HPCCSQLParser_expression_return
     (*expression)	(struct HPCCSQLParser_Ctx_struct * ctx);

     HPCCSQLParser_orExpression_return
     (*orExpression)	(struct HPCCSQLParser_Ctx_struct * ctx);

     HPCCSQLParser_andExpression_return
     (*andExpression)	(struct HPCCSQLParser_Ctx_struct * ctx);

     HPCCSQLParser_relationalExpression_return
     (*relationalExpression)	(struct HPCCSQLParser_Ctx_struct * ctx);

     HPCCSQLParser_additionExpression_return
     (*additionExpression)	(struct HPCCSQLParser_Ctx_struct * ctx);

     HPCCSQLParser_multiplyExpression_return
     (*multiplyExpression)	(struct HPCCSQLParser_Ctx_struct * ctx);

     HPCCSQLParser_listExpression_return
     (*listExpression)	(struct HPCCSQLParser_Ctx_struct * ctx);

     HPCCSQLParser_unaryExpression_return
     (*unaryExpression)	(struct HPCCSQLParser_Ctx_struct * ctx);

     HPCCSQLParser_simpleExpression_return
     (*simpleExpression)	(struct HPCCSQLParser_Ctx_struct * ctx);

     HPCCSQLParser_parenExpression_return
     (*parenExpression)	(struct HPCCSQLParser_Ctx_struct * ctx);

     HPCCSQLParser_literalExpressionList_return
     (*literalExpressionList)	(struct HPCCSQLParser_Ctx_struct * ctx);

     HPCCSQLParser_literalOrPlaceholderExpressionList_return
     (*literalOrPlaceholderExpressionList)	(struct HPCCSQLParser_Ctx_struct * ctx);

     HPCCSQLParser_literalOrPlaceholderValue_return
     (*literalOrPlaceholderValue)	(struct HPCCSQLParser_Ctx_struct * ctx);

     HPCCSQLParser_function_call_return
     (*function_call)	(struct HPCCSQLParser_Ctx_struct * ctx);

     HPCCSQLParser_functionParam_return
     (*functionParam)	(struct HPCCSQLParser_Ctx_struct * ctx);

     HPCCSQLParser_parameterPlaceHolder_return
     (*parameterPlaceHolder)	(struct HPCCSQLParser_Ctx_struct * ctx);

     HPCCSQLParser_userVariable_return
     (*userVariable)	(struct HPCCSQLParser_Ctx_struct * ctx);

     HPCCSQLParser_table_references_return
     (*table_references)	(struct HPCCSQLParser_Ctx_struct * ctx);

     HPCCSQLParser_table_reference_return
     (*table_reference)	(struct HPCCSQLParser_Ctx_struct * ctx);

     HPCCSQLParser_table_list_return
     (*table_list)	(struct HPCCSQLParser_Ctx_struct * ctx);

     HPCCSQLParser_jointable_return
     (*jointable)	(struct HPCCSQLParser_Ctx_struct * ctx);

     HPCCSQLParser_table_factor1_return
     (*table_factor1)	(struct HPCCSQLParser_Ctx_struct * ctx);

     HPCCSQLParser_table_factor2_return
     (*table_factor2)	(struct HPCCSQLParser_Ctx_struct * ctx);

     HPCCSQLParser_table_factor3_return
     (*table_factor3)	(struct HPCCSQLParser_Ctx_struct * ctx);

     HPCCSQLParser_table_atom_return
     (*table_atom)	(struct HPCCSQLParser_Ctx_struct * ctx);

     HPCCSQLParser_join_condition_return
     (*join_condition)	(struct HPCCSQLParser_Ctx_struct * ctx);

     HPCCSQLParser_index_hint_return
     (*index_hint)	(struct HPCCSQLParser_Ctx_struct * ctx);

     HPCCSQLParser_root_statement_return
     (*root_statement)	(struct HPCCSQLParser_Ctx_struct * ctx);

     HPCCSQLParser_data_manipulation_statements_return
     (*data_manipulation_statements)	(struct HPCCSQLParser_Ctx_struct * ctx);

     HPCCSQLParser_create_index_statement_return
     (*create_index_statement)	(struct HPCCSQLParser_Ctx_struct * ctx);

     HPCCSQLParser_create_load_table_statement_return
     (*create_load_table_statement)	(struct HPCCSQLParser_Ctx_struct * ctx);

     HPCCSQLParser_table_options_return
     (*table_options)	(struct HPCCSQLParser_Ctx_struct * ctx);

     HPCCSQLParser_table_option_return
     (*table_option)	(struct HPCCSQLParser_Ctx_struct * ctx);

     HPCCSQLParser_create_table_statement_return
     (*create_table_statement)	(struct HPCCSQLParser_Ctx_struct * ctx);

     HPCCSQLParser_create_table_columns_definition_return
     (*create_table_columns_definition)	(struct HPCCSQLParser_Ctx_struct * ctx);

     HPCCSQLParser_create_definition_return
     (*create_definition)	(struct HPCCSQLParser_Ctx_struct * ctx);

     HPCCSQLParser_length_and_or_precision_definition_return
     (*length_and_or_precision_definition)	(struct HPCCSQLParser_Ctx_struct * ctx);

     HPCCSQLParser_length_and_precision_definition_return
     (*length_and_precision_definition)	(struct HPCCSQLParser_Ctx_struct * ctx);

     HPCCSQLParser_length_definition_return
     (*length_definition)	(struct HPCCSQLParser_Ctx_struct * ctx);

     HPCCSQLParser_text_params_return
     (*text_params)	(struct HPCCSQLParser_Ctx_struct * ctx);

     HPCCSQLParser_column_definition_return
     (*column_definition)	(struct HPCCSQLParser_Ctx_struct * ctx);

     HPCCSQLParser_charset_declaration_return
     (*charset_declaration)	(struct HPCCSQLParser_Ctx_struct * ctx);

     HPCCSQLParser_charset_name_return
     (*charset_name)	(struct HPCCSQLParser_Ctx_struct * ctx);

     HPCCSQLParser_file_data_format_type_options_return
     (*file_data_format_type_options)	(struct HPCCSQLParser_Ctx_struct * ctx);

     HPCCSQLParser_file_data_format_type_return
     (*file_data_format_type)	(struct HPCCSQLParser_Ctx_struct * ctx);

     HPCCSQLParser_file_data_format_declaration_return
     (*file_data_format_declaration)	(struct HPCCSQLParser_Ctx_struct * ctx);

     HPCCSQLParser_variable_data_line_terminator_return
     (*variable_data_line_terminator)	(struct HPCCSQLParser_Ctx_struct * ctx);

     HPCCSQLParser_variable_data_field_terminator_return
     (*variable_data_field_terminator)	(struct HPCCSQLParser_Ctx_struct * ctx);

     HPCCSQLParser_variable_data_escaped_return
     (*variable_data_escaped)	(struct HPCCSQLParser_Ctx_struct * ctx);

     HPCCSQLParser_variable_data_enclosed_return
     (*variable_data_enclosed)	(struct HPCCSQLParser_Ctx_struct * ctx);

     HPCCSQLParser_variable_data_format_declaration_field_return
     (*variable_data_format_declaration_field)	(struct HPCCSQLParser_Ctx_struct * ctx);

     HPCCSQLParser_variable_data_format_declaration_line_return
     (*variable_data_format_declaration_line)	(struct HPCCSQLParser_Ctx_struct * ctx);

     HPCCSQLParser_landing_zone_information_return
     (*landing_zone_information)	(struct HPCCSQLParser_Ctx_struct * ctx);

     HPCCSQLParser_load_table_statement_return
     (*load_table_statement)	(struct HPCCSQLParser_Ctx_struct * ctx);

     HPCCSQLParser_select_statement_return
     (*select_statement)	(struct HPCCSQLParser_Ctx_struct * ctx);

     HPCCSQLParser_select_portion_return
     (*select_portion)	(struct HPCCSQLParser_Ctx_struct * ctx);

     HPCCSQLParser_from_portion_return
     (*from_portion)	(struct HPCCSQLParser_Ctx_struct * ctx);

     HPCCSQLParser_where_clause_return
     (*where_clause)	(struct HPCCSQLParser_Ctx_struct * ctx);

     HPCCSQLParser_groupby_clause_return
     (*groupby_clause)	(struct HPCCSQLParser_Ctx_struct * ctx);

     HPCCSQLParser_having_clause_return
     (*having_clause)	(struct HPCCSQLParser_Ctx_struct * ctx);

     HPCCSQLParser_orderby_clause_return
     (*orderby_clause)	(struct HPCCSQLParser_Ctx_struct * ctx);

     HPCCSQLParser_orderby_item_return
     (*orderby_item)	(struct HPCCSQLParser_Ctx_struct * ctx);

     HPCCSQLParser_limit_clause_return
     (*limit_clause)	(struct HPCCSQLParser_Ctx_struct * ctx);

     HPCCSQLParser_length_return
     (*length)	(struct HPCCSQLParser_Ctx_struct * ctx);

     HPCCSQLParser_offset_return
     (*offset)	(struct HPCCSQLParser_Ctx_struct * ctx);

     HPCCSQLParser_row_count_return
     (*row_count)	(struct HPCCSQLParser_Ctx_struct * ctx);

     HPCCSQLParser_select_list_return
     (*select_list)	(struct HPCCSQLParser_Ctx_struct * ctx);

     HPCCSQLParser_select_item_return
     (*select_item)	(struct HPCCSQLParser_Ctx_struct * ctx);

     HPCCSQLParser_column_list_return
     (*column_list)	(struct HPCCSQLParser_Ctx_struct * ctx);

     HPCCSQLParser_subquery_return
     (*subquery)	(struct HPCCSQLParser_Ctx_struct * ctx);

     HPCCSQLParser_table_spec_return
     (*table_spec)	(struct HPCCSQLParser_Ctx_struct * ctx);

     HPCCSQLParser_table_fork_return
     (*table_fork)	(struct HPCCSQLParser_Ctx_struct * ctx);

     HPCCSQLParser_schema_spec_return
     (*schema_spec)	(struct HPCCSQLParser_Ctx_struct * ctx);

     HPCCSQLParser_column_wildcard_return
     (*column_wildcard)	(struct HPCCSQLParser_Ctx_struct * ctx);

     HPCCSQLParser_callParam_return
     (*callParam)	(struct HPCCSQLParser_Ctx_struct * ctx);

     HPCCSQLParser_call_procedure_name_part_return
     (*call_procedure_name_part)	(struct HPCCSQLParser_Ctx_struct * ctx);

     HPCCSQLParser_call_procedure_params_return
     (*call_procedure_params)	(struct HPCCSQLParser_Ctx_struct * ctx);

     HPCCSQLParser_call_statement_return
     (*call_statement)	(struct HPCCSQLParser_Ctx_struct * ctx);

     ANTLR3_BOOLEAN
     (*synpred43_HPCCSQL)	(struct HPCCSQLParser_Ctx_struct * ctx);

     ANTLR3_BOOLEAN
     (*synpred47_HPCCSQL)	(struct HPCCSQLParser_Ctx_struct * ctx);
    // Delegated rules

    const char * (*getGrammarFileName)();
    void            (*reset)  (struct HPCCSQLParser_Ctx_struct * ctx);
    void	    (*free)   (struct HPCCSQLParser_Ctx_struct * ctx);
/* @headerFile.members() */
pANTLR3_BASE_TREE_ADAPTOR	adaptor;
pANTLR3_VECTOR_FACTORY		vectors;
/* End @headerFile.members() */
};

// Function protoypes for the constructor functions that external translation units
// such as delegators and delegates may wish to call.
//
ANTLR3_API pHPCCSQLParser HPCCSQLParserNew         (
pANTLR3_COMMON_TOKEN_STREAM
 instream);
ANTLR3_API pHPCCSQLParser HPCCSQLParserNewSSD      (
pANTLR3_COMMON_TOKEN_STREAM
 instream, pANTLR3_RECOGNIZER_SHARED_STATE state);

/** Symbolic definitions of all the tokens that the 
parser
 will work with.
 * \{
 *
 * Antlr will define EOF, but we can't use that as it it is too common in
 * in C header files and that would be confusing. There is no way to filter this out at the moment
 * so we just undef it here for now. That isn't the value we get back from C recognizers
 * anyway. We are looking for ANTLR3_TOKEN_EOF.
 */
#ifdef	EOF
#undef	EOF
#endif
#ifdef	Tokens
#undef	Tokens
#endif
#define EOF      -1
#define T__230      230
#define T__231      231
#define T__232      232
#define ABSOLUTE_FILE_ID      4
#define ABSOLUTE_FILE_ID_PREFIX      5
#define ADD_SYM      6
#define ALL      7
#define AND_SYM      8
#define ANY      9
#define ARROW      10
#define ASC      11
#define ASCII_SYM      12
#define ASTERISK      13
#define AS_SYM      14
#define AT_SYM      15
#define AVG      16
#define Ai      17
#define BETWEEN      18
#define BIGINT_SYM      19
#define BINARY_SYM      20
#define BITAND      21
#define BIT_NUM      22
#define BIT_SYM      23
#define BLOB_SYM      24
#define BOOLEAN_SYM      25
#define BOOL_SYM      26
#define BY_SYM      27
#define Bi      28
#define CALL_SYM      29
#define CHARACTER_SET      30
#define CHAR_SYM      31
#define COLON      32
#define COLUMNS_SYM      33
#define COLUMN_SYM      34
#define COMMA      35
#define COMMENT_SYM      36
#define CONNECTION_SYM      37
#define CONTAINS_SYM      38
#define COUNT      39
#define CREATE_SYM      40
#define CSV_SYM      41
#define Ci      42
#define DATA_SYM      43
#define DATETIME_SYM      44
#define DATE_SYM      45
#define DCOLON      46
#define DECIMAL_SYM      47
#define DEFSCOPE      48
#define DESC      49
#define DIGIT_FRAGMENT      50
#define DIRECTORY_SYM      51
#define DISTINCT      52
#define DIVIDE      53
#define DOLLAR      54
#define DOT      55
#define DOUBLE_SYM      56
#define DQUOTE      57
#define Di      58
#define EBCDIC_SYM      59
#define ENCLOSED_SYM      60
#define ENUM_SYM      61
#define EQ_SYM      62
#define ESCAPED_SYM      63
#define EXISTS_SYM      64
#define Ei      65
#define FALSE_SYM      66
#define FIELDS_SYM      67
#define FLAT_SYM      68
#define FLOAT_SYM      69
#define FOR_SYM      70
#define FROM      71
#define Fi      72
#define GET      73
#define GROUP_SYM      74
#define GTH      75
#define Gi      76
#define HAVING      77
#define HEX_DIGIT      78
#define HEX_DIGIT_FRAGMENT      79
#define Hi      80
#define ID      81
#define ID_FRAGMENT      82
#define IFNOTEXISTS      83
#define IF_SYM      84
#define IGNORE_SYM      85
#define INDEX_SYM      86
#define INFILE_SYM      87
#define INNER_SYM      88
#define INTEGER_NUM      89
#define INTEGER_SYM      90
#define INTO_SYM      91
#define INT_SYM      92
#define IN_SYM      93
#define ISNOTNULL      94
#define ISNULL      95
#define IS_SYM      96
#define Ii      97
#define JOIN_SYM      98
#define JSON_SYM      99
#define Ji      100
#define KEYS      101
#define KEY_SYM      102
#define Ki      103
#define LAST_SYM      104
#define LBRACK      105
#define LCURLY      106
#define LEFT      107
#define LET      108
#define LETTER_FRAGMENT      109
#define LIMIT      110
#define LINES_SYM      111
#define LOAD_SYM      112
#define LOCAL_SYM      113
#define LONGBLOB_SYM      114
#define LONGTEXT_SYM      115
#define LOWER      116
#define LPAREN      117
#define LTH      118
#define Li      119
#define MAX_SYM      120
#define MEDIUMBLOB_SYM      121
#define MEDIUMINT      122
#define MEDIUMTEXT_SYM      123
#define MINUS      124
#define MIN_SYM      125
#define MOD      126
#define MOD_SYM      127
#define Mi      128
#define NEGATION      129
#define NOT_EQ      130
#define NOT_IN      131
#define NOT_SYM      132
#define NULL_SYM      133
#define NUMERIC_SYM      134
#define Ni      135
#define OFFSET_SYM      136
#define ON      137
#define OPTIONALLY_SYM      138
#define ORDER_SYM      139
#define OR_SYM      140
#define OUTER      141
#define OUT_SYM      142
#define Oi      143
#define PLUS      144
#define POWER      145
#define POWER_OP      146
#define Pi      147
#define QUESTION      148
#define Qi      149
#define RBRACK      150
#define RCURLY      151
#define REAL_NUMBER      152
#define REAL_SYM      153
#define REPLACE_SYM      154
#define RPAREN      155
#define Ri      156
#define SELECT      157
#define SEMI      158
#define SET_SYM      159
#define SET_VAR      160
#define SHIFT_LEFT      161
#define SHIFT_RIGHT      162
#define SMALLINT      163
#define SQUOTE      164
#define SUM      165
#define Si      166
#define TABLE_SYM      167
#define TERMINATED_SYM      168
#define TEXT_STRING      169
#define TEXT_SYM      170
#define TIMESTAMP_SYM      171
#define TIME_SYM      172
#define TINYBLOB_SYM      173
#define TINYINT      174
#define TINYTEXT_SYM      175
#define TOKEN_ALIAS      176
#define TOKEN_AVOID_INDEX      177
#define TOKEN_CALL_STATEMENT      178
#define TOKEN_COLUMN      179
#define TOKEN_COLUMNWILDCARD      180
#define TOKEN_COLUMN_DEF      181
#define TOKEN_COLUMN_DEF_LIST      182
#define TOKEN_CREATE_INDEX_STATEMENT      183
#define TOKEN_CREATE_LOAD_TABLE_STATEMENT      184
#define TOKEN_CREATE_TABLE      185
#define TOKEN_DONOT_OVERWRITE      186
#define TOKEN_FROM_LIST      187
#define TOKEN_FROM_TABLE      188
#define TOKEN_FUNCEXP      189
#define TOKEN_INDEX_HINT      190
#define TOKEN_INNER_JOIN      191
#define TOKEN_LANDING_ZONE      192
#define TOKEN_LISTEXP      193
#define TOKEN_LOAD_TABLE      194
#define TOKEN_OUTTER_JOIN      195
#define TOKEN_OVERWRITE      196
#define TOKEN_PARAMPLACEHOLDER      197
#define TOKEN_PROC_NAME      198
#define TOKEN_PROC_PARAMS      199
#define TOKEN_ROOT      200
#define TOKEN_SELECT_STATEMENT      201
#define TOKEN_TABLE_SCHEMA      202
#define TOKEN_VARIABLE_FILE      203
#define TOKEN_VAR_ENCLOSED      204
#define TOKEN_VAR_ESCAPED      205
#define TOKEN_VAR_SEPERATOR      206
#define TOKEN_VAR_TERMINATOR      207
#define TRUE_SYM      208
#define TYPE_SYM      209
#define Ti      210
#define UNDERSCORE      211
#define UNSIGNED_SYM      212
#define UPPER      213
#define USE_SYM      214
#define UTF8_SYM      215
#define Ui      216
#define VARBINARY_SYM      217
#define VARCHAR_SYM      218
#define VERTBAR      219
#define Vi      220
#define WHERE      221
#define WHITE_SPACE      222
#define Wi      223
#define XML_SYM      224
#define XOR      225
#define Xi      226
#define YEAR_SYM      227
#define Yi      228
#define Zi      229
#ifdef	EOF
#undef	EOF
#define	EOF	ANTLR3_TOKEN_EOF
#endif

#ifndef TOKENSOURCE
#define TOKENSOURCE(lxr) lxr->pLexer->rec->state->tokSource
#endif

/* End of token definitions for HPCCSQLParser
 * =============================================================================
 */
/** } */

#ifdef __cplusplus
}
#endif

#endif

/* END - Note:Keep extra line feed to satisfy UNIX systems */
