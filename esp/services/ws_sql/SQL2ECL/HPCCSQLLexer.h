/** \file
 *  This C header file was generated by $ANTLR version 3.4
 *
 *     -  From the grammar source file : /home/hpccuser/GIT/wssql/esp/services/ws_sql/SQL2ECL/ANTLR3c/HPCCSQL.g
 *     -                            On : 2016-10-20 15:49:01
 *     -                 for the lexer : HPCCSQLLexerLexer
 *
 * Editing it, at least manually, is not wise.
 *
 * C language generator and runtime by Jim Idle, jimi|hereisanat|idle|dotgoeshere|ws.
 *
 *
 * The lexer 
HPCCSQLLexer

has the callable functions (rules) shown below,
 * which will invoke the code for the associated rule in the source grammar
 * assuming that the input stream is pointing to a token/text stream that could begin
 * this rule.
 *
 * For instance if you call the first (topmost) rule in a parser grammar, you will
 * get the results of a full parse, but calling a rule half way through the grammar will
 * allow you to pass part of a full token stream to the parser, such as for syntax checking
 * in editors and so on.
 *
 * The parser entry points are called indirectly (by function pointer to function) via
 * a parser context typedef pHPCCSQLLexer, which is returned from a call to HPCCSQLLexerNew().
 *
 * As this is a generated lexer, it is unlikely you will call it 'manually'. However
 * the methods are provided anyway.
 *
 * The methods in pHPCCSQLLexer are  as follows:
 *
 *  - 
 void
      pHPCCSQLLexer->T__230(pHPCCSQLLexer)
 *  - 
 void
      pHPCCSQLLexer->T__231(pHPCCSQLLexer)
 *  - 
 void
      pHPCCSQLLexer->T__232(pHPCCSQLLexer)
 *  - 
 void
      pHPCCSQLLexer->Ai(pHPCCSQLLexer)
 *  - 
 void
      pHPCCSQLLexer->Bi(pHPCCSQLLexer)
 *  - 
 void
      pHPCCSQLLexer->Ci(pHPCCSQLLexer)
 *  - 
 void
      pHPCCSQLLexer->Di(pHPCCSQLLexer)
 *  - 
 void
      pHPCCSQLLexer->Ei(pHPCCSQLLexer)
 *  - 
 void
      pHPCCSQLLexer->Fi(pHPCCSQLLexer)
 *  - 
 void
      pHPCCSQLLexer->Gi(pHPCCSQLLexer)
 *  - 
 void
      pHPCCSQLLexer->Hi(pHPCCSQLLexer)
 *  - 
 void
      pHPCCSQLLexer->Ii(pHPCCSQLLexer)
 *  - 
 void
      pHPCCSQLLexer->Ji(pHPCCSQLLexer)
 *  - 
 void
      pHPCCSQLLexer->Ki(pHPCCSQLLexer)
 *  - 
 void
      pHPCCSQLLexer->Li(pHPCCSQLLexer)
 *  - 
 void
      pHPCCSQLLexer->Mi(pHPCCSQLLexer)
 *  - 
 void
      pHPCCSQLLexer->Ni(pHPCCSQLLexer)
 *  - 
 void
      pHPCCSQLLexer->Oi(pHPCCSQLLexer)
 *  - 
 void
      pHPCCSQLLexer->Pi(pHPCCSQLLexer)
 *  - 
 void
      pHPCCSQLLexer->Qi(pHPCCSQLLexer)
 *  - 
 void
      pHPCCSQLLexer->Ri(pHPCCSQLLexer)
 *  - 
 void
      pHPCCSQLLexer->Si(pHPCCSQLLexer)
 *  - 
 void
      pHPCCSQLLexer->Ti(pHPCCSQLLexer)
 *  - 
 void
      pHPCCSQLLexer->Ui(pHPCCSQLLexer)
 *  - 
 void
      pHPCCSQLLexer->Vi(pHPCCSQLLexer)
 *  - 
 void
      pHPCCSQLLexer->Wi(pHPCCSQLLexer)
 *  - 
 void
      pHPCCSQLLexer->Xi(pHPCCSQLLexer)
 *  - 
 void
      pHPCCSQLLexer->Yi(pHPCCSQLLexer)
 *  - 
 void
      pHPCCSQLLexer->Zi(pHPCCSQLLexer)
 *  - 
 void
      pHPCCSQLLexer->ADD_SYM(pHPCCSQLLexer)
 *  - 
 void
      pHPCCSQLLexer->ALL(pHPCCSQLLexer)
 *  - 
 void
      pHPCCSQLLexer->ANY(pHPCCSQLLexer)
 *  - 
 void
      pHPCCSQLLexer->AS_SYM(pHPCCSQLLexer)
 *  - 
 void
      pHPCCSQLLexer->ASC(pHPCCSQLLexer)
 *  - 
 void
      pHPCCSQLLexer->ASCII_SYM(pHPCCSQLLexer)
 *  - 
 void
      pHPCCSQLLexer->AT_SYM(pHPCCSQLLexer)
 *  - 
 void
      pHPCCSQLLexer->AVG(pHPCCSQLLexer)
 *  - 
 void
      pHPCCSQLLexer->BETWEEN(pHPCCSQLLexer)
 *  - 
 void
      pHPCCSQLLexer->BINARY_SYM(pHPCCSQLLexer)
 *  - 
 void
      pHPCCSQLLexer->BIT_SYM(pHPCCSQLLexer)
 *  - 
 void
      pHPCCSQLLexer->BOOL_SYM(pHPCCSQLLexer)
 *  - 
 void
      pHPCCSQLLexer->BOOLEAN_SYM(pHPCCSQLLexer)
 *  - 
 void
      pHPCCSQLLexer->BY_SYM(pHPCCSQLLexer)
 *  - 
 void
      pHPCCSQLLexer->CALL_SYM(pHPCCSQLLexer)
 *  - 
 void
      pHPCCSQLLexer->CREATE_SYM(pHPCCSQLLexer)
 *  - 
 void
      pHPCCSQLLexer->COLUMN_SYM(pHPCCSQLLexer)
 *  - 
 void
      pHPCCSQLLexer->COMMENT_SYM(pHPCCSQLLexer)
 *  - 
 void
      pHPCCSQLLexer->CONTAINS_SYM(pHPCCSQLLexer)
 *  - 
 void
      pHPCCSQLLexer->COUNT(pHPCCSQLLexer)
 *  - 
 void
      pHPCCSQLLexer->DATA_SYM(pHPCCSQLLexer)
 *  - 
 void
      pHPCCSQLLexer->DESC(pHPCCSQLLexer)
 *  - 
 void
      pHPCCSQLLexer->DISTINCT(pHPCCSQLLexer)
 *  - 
 void
      pHPCCSQLLexer->EXISTS_SYM(pHPCCSQLLexer)
 *  - 
 void
      pHPCCSQLLexer->FALSE_SYM(pHPCCSQLLexer)
 *  - 
 void
      pHPCCSQLLexer->FOR_SYM(pHPCCSQLLexer)
 *  - 
 void
      pHPCCSQLLexer->FROM(pHPCCSQLLexer)
 *  - 
 void
      pHPCCSQLLexer->GROUP_SYM(pHPCCSQLLexer)
 *  - 
 void
      pHPCCSQLLexer->HAVING(pHPCCSQLLexer)
 *  - 
 void
      pHPCCSQLLexer->IF_SYM(pHPCCSQLLexer)
 *  - 
 void
      pHPCCSQLLexer->IGNORE_SYM(pHPCCSQLLexer)
 *  - 
 void
      pHPCCSQLLexer->IN_SYM(pHPCCSQLLexer)
 *  - 
 void
      pHPCCSQLLexer->INFILE_SYM(pHPCCSQLLexer)
 *  - 
 void
      pHPCCSQLLexer->INTO_SYM(pHPCCSQLLexer)
 *  - 
 void
      pHPCCSQLLexer->INT_SYM(pHPCCSQLLexer)
 *  - 
 void
      pHPCCSQLLexer->INTEGER_SYM(pHPCCSQLLexer)
 *  - 
 void
      pHPCCSQLLexer->INDEX_SYM(pHPCCSQLLexer)
 *  - 
 void
      pHPCCSQLLexer->INNER_SYM(pHPCCSQLLexer)
 *  - 
 void
      pHPCCSQLLexer->IS_SYM(pHPCCSQLLexer)
 *  - 
 void
      pHPCCSQLLexer->JOIN_SYM(pHPCCSQLLexer)
 *  - 
 void
      pHPCCSQLLexer->KEY_SYM(pHPCCSQLLexer)
 *  - 
 void
      pHPCCSQLLexer->KEYS(pHPCCSQLLexer)
 *  - 
 void
      pHPCCSQLLexer->LAST_SYM(pHPCCSQLLexer)
 *  - 
 void
      pHPCCSQLLexer->LEFT(pHPCCSQLLexer)
 *  - 
 void
      pHPCCSQLLexer->LIMIT(pHPCCSQLLexer)
 *  - 
 void
      pHPCCSQLLexer->LOAD_SYM(pHPCCSQLLexer)
 *  - 
 void
      pHPCCSQLLexer->LOCAL_SYM(pHPCCSQLLexer)
 *  - 
 void
      pHPCCSQLLexer->LOWER(pHPCCSQLLexer)
 *  - 
 void
      pHPCCSQLLexer->MAX_SYM(pHPCCSQLLexer)
 *  - 
 void
      pHPCCSQLLexer->MEDIUMINT(pHPCCSQLLexer)
 *  - 
 void
      pHPCCSQLLexer->MIN_SYM(pHPCCSQLLexer)
 *  - 
 void
      pHPCCSQLLexer->MOD(pHPCCSQLLexer)
 *  - 
 void
      pHPCCSQLLexer->NOT_SYM(pHPCCSQLLexer)
 *  - 
 void
      pHPCCSQLLexer->NULL_SYM(pHPCCSQLLexer)
 *  - 
 void
      pHPCCSQLLexer->OFFSET_SYM(pHPCCSQLLexer)
 *  - 
 void
      pHPCCSQLLexer->ON(pHPCCSQLLexer)
 *  - 
 void
      pHPCCSQLLexer->ORDER_SYM(pHPCCSQLLexer)
 *  - 
 void
      pHPCCSQLLexer->OUT_SYM(pHPCCSQLLexer)
 *  - 
 void
      pHPCCSQLLexer->OUTER(pHPCCSQLLexer)
 *  - 
 void
      pHPCCSQLLexer->POWER(pHPCCSQLLexer)
 *  - 
 void
      pHPCCSQLLexer->REPLACE_SYM(pHPCCSQLLexer)
 *  - 
 void
      pHPCCSQLLexer->SELECT(pHPCCSQLLexer)
 *  - 
 void
      pHPCCSQLLexer->SMALLINT(pHPCCSQLLexer)
 *  - 
 void
      pHPCCSQLLexer->SUM(pHPCCSQLLexer)
 *  - 
 void
      pHPCCSQLLexer->TABLE_SYM(pHPCCSQLLexer)
 *  - 
 void
      pHPCCSQLLexer->TINYINT(pHPCCSQLLexer)
 *  - 
 void
      pHPCCSQLLexer->TRUE_SYM(pHPCCSQLLexer)
 *  - 
 void
      pHPCCSQLLexer->TYPE_SYM(pHPCCSQLLexer)
 *  - 
 void
      pHPCCSQLLexer->UPPER(pHPCCSQLLexer)
 *  - 
 void
      pHPCCSQLLexer->USE_SYM(pHPCCSQLLexer)
 *  - 
 void
      pHPCCSQLLexer->UTF8_SYM(pHPCCSQLLexer)
 *  - 
 void
      pHPCCSQLLexer->UNSIGNED_SYM(pHPCCSQLLexer)
 *  - 
 void
      pHPCCSQLLexer->WHERE(pHPCCSQLLexer)
 *  - 
 void
      pHPCCSQLLexer->XOR(pHPCCSQLLexer)
 *  - 
 void
      pHPCCSQLLexer->BIGINT_SYM(pHPCCSQLLexer)
 *  - 
 void
      pHPCCSQLLexer->REAL_SYM(pHPCCSQLLexer)
 *  - 
 void
      pHPCCSQLLexer->DOUBLE_SYM(pHPCCSQLLexer)
 *  - 
 void
      pHPCCSQLLexer->FLOAT_SYM(pHPCCSQLLexer)
 *  - 
 void
      pHPCCSQLLexer->DECIMAL_SYM(pHPCCSQLLexer)
 *  - 
 void
      pHPCCSQLLexer->NUMERIC_SYM(pHPCCSQLLexer)
 *  - 
 void
      pHPCCSQLLexer->DATE_SYM(pHPCCSQLLexer)
 *  - 
 void
      pHPCCSQLLexer->TIME_SYM(pHPCCSQLLexer)
 *  - 
 void
      pHPCCSQLLexer->TIMESTAMP_SYM(pHPCCSQLLexer)
 *  - 
 void
      pHPCCSQLLexer->DATETIME_SYM(pHPCCSQLLexer)
 *  - 
 void
      pHPCCSQLLexer->YEAR_SYM(pHPCCSQLLexer)
 *  - 
 void
      pHPCCSQLLexer->CHAR_SYM(pHPCCSQLLexer)
 *  - 
 void
      pHPCCSQLLexer->VARCHAR_SYM(pHPCCSQLLexer)
 *  - 
 void
      pHPCCSQLLexer->VARBINARY_SYM(pHPCCSQLLexer)
 *  - 
 void
      pHPCCSQLLexer->TINYBLOB_SYM(pHPCCSQLLexer)
 *  - 
 void
      pHPCCSQLLexer->BLOB_SYM(pHPCCSQLLexer)
 *  - 
 void
      pHPCCSQLLexer->MEDIUMBLOB_SYM(pHPCCSQLLexer)
 *  - 
 void
      pHPCCSQLLexer->LONGBLOB_SYM(pHPCCSQLLexer)
 *  - 
 void
      pHPCCSQLLexer->TINYTEXT_SYM(pHPCCSQLLexer)
 *  - 
 void
      pHPCCSQLLexer->TEXT_SYM(pHPCCSQLLexer)
 *  - 
 void
      pHPCCSQLLexer->MEDIUMTEXT_SYM(pHPCCSQLLexer)
 *  - 
 void
      pHPCCSQLLexer->LONGTEXT_SYM(pHPCCSQLLexer)
 *  - 
 void
      pHPCCSQLLexer->ENUM_SYM(pHPCCSQLLexer)
 *  - 
 void
      pHPCCSQLLexer->SET_SYM(pHPCCSQLLexer)
 *  - 
 void
      pHPCCSQLLexer->FLAT_SYM(pHPCCSQLLexer)
 *  - 
 void
      pHPCCSQLLexer->XML_SYM(pHPCCSQLLexer)
 *  - 
 void
      pHPCCSQLLexer->CSV_SYM(pHPCCSQLLexer)
 *  - 
 void
      pHPCCSQLLexer->JSON_SYM(pHPCCSQLLexer)
 *  - 
 void
      pHPCCSQLLexer->CONNECTION_SYM(pHPCCSQLLexer)
 *  - 
 void
      pHPCCSQLLexer->DIRECTORY_SYM(pHPCCSQLLexer)
 *  - 
 void
      pHPCCSQLLexer->ENCLOSED_SYM(pHPCCSQLLexer)
 *  - 
 void
      pHPCCSQLLexer->LINES_SYM(pHPCCSQLLexer)
 *  - 
 void
      pHPCCSQLLexer->ESCAPED_SYM(pHPCCSQLLexer)
 *  - 
 void
      pHPCCSQLLexer->TERMINATED_SYM(pHPCCSQLLexer)
 *  - 
 void
      pHPCCSQLLexer->OPTIONALLY_SYM(pHPCCSQLLexer)
 *  - 
 void
      pHPCCSQLLexer->EBCDIC_SYM(pHPCCSQLLexer)
 *  - 
 void
      pHPCCSQLLexer->FIELDS_SYM(pHPCCSQLLexer)
 *  - 
 void
      pHPCCSQLLexer->COLUMNS_SYM(pHPCCSQLLexer)
 *  - 
 void
      pHPCCSQLLexer->CHARACTER_SET(pHPCCSQLLexer)
 *  - 
 void
      pHPCCSQLLexer->IFNOTEXISTS(pHPCCSQLLexer)
 *  - 
 void
      pHPCCSQLLexer->ISNOTNULL(pHPCCSQLLexer)
 *  - 
 void
      pHPCCSQLLexer->ISNULL(pHPCCSQLLexer)
 *  - 
 void
      pHPCCSQLLexer->NOT_IN(pHPCCSQLLexer)
 *  - 
 void
      pHPCCSQLLexer->DIVIDE(pHPCCSQLLexer)
 *  - 
 void
      pHPCCSQLLexer->MOD_SYM(pHPCCSQLLexer)
 *  - 
 void
      pHPCCSQLLexer->OR_SYM(pHPCCSQLLexer)
 *  - 
 void
      pHPCCSQLLexer->AND_SYM(pHPCCSQLLexer)
 *  - 
 void
      pHPCCSQLLexer->ARROW(pHPCCSQLLexer)
 *  - 
 void
      pHPCCSQLLexer->EQ_SYM(pHPCCSQLLexer)
 *  - 
 void
      pHPCCSQLLexer->NOT_EQ(pHPCCSQLLexer)
 *  - 
 void
      pHPCCSQLLexer->LET(pHPCCSQLLexer)
 *  - 
 void
      pHPCCSQLLexer->GET(pHPCCSQLLexer)
 *  - 
 void
      pHPCCSQLLexer->SET_VAR(pHPCCSQLLexer)
 *  - 
 void
      pHPCCSQLLexer->SHIFT_LEFT(pHPCCSQLLexer)
 *  - 
 void
      pHPCCSQLLexer->SHIFT_RIGHT(pHPCCSQLLexer)
 *  - 
 void
      pHPCCSQLLexer->SQUOTE(pHPCCSQLLexer)
 *  - 
 void
      pHPCCSQLLexer->DQUOTE(pHPCCSQLLexer)
 *  - 
 void
      pHPCCSQLLexer->DOLLAR(pHPCCSQLLexer)
 *  - 
 void
      pHPCCSQLLexer->QUESTION(pHPCCSQLLexer)
 *  - 
 void
      pHPCCSQLLexer->SEMI(pHPCCSQLLexer)
 *  - 
 void
      pHPCCSQLLexer->COLON(pHPCCSQLLexer)
 *  - 
 void
      pHPCCSQLLexer->DOT(pHPCCSQLLexer)
 *  - 
 void
      pHPCCSQLLexer->COMMA(pHPCCSQLLexer)
 *  - 
 void
      pHPCCSQLLexer->ASTERISK(pHPCCSQLLexer)
 *  - 
 void
      pHPCCSQLLexer->RPAREN(pHPCCSQLLexer)
 *  - 
 void
      pHPCCSQLLexer->LPAREN(pHPCCSQLLexer)
 *  - 
 void
      pHPCCSQLLexer->RBRACK(pHPCCSQLLexer)
 *  - 
 void
      pHPCCSQLLexer->LBRACK(pHPCCSQLLexer)
 *  - 
 void
      pHPCCSQLLexer->LCURLY(pHPCCSQLLexer)
 *  - 
 void
      pHPCCSQLLexer->RCURLY(pHPCCSQLLexer)
 *  - 
 void
      pHPCCSQLLexer->PLUS(pHPCCSQLLexer)
 *  - 
 void
      pHPCCSQLLexer->MINUS(pHPCCSQLLexer)
 *  - 
 void
      pHPCCSQLLexer->NEGATION(pHPCCSQLLexer)
 *  - 
 void
      pHPCCSQLLexer->VERTBAR(pHPCCSQLLexer)
 *  - 
 void
      pHPCCSQLLexer->BITAND(pHPCCSQLLexer)
 *  - 
 void
      pHPCCSQLLexer->POWER_OP(pHPCCSQLLexer)
 *  - 
 void
      pHPCCSQLLexer->GTH(pHPCCSQLLexer)
 *  - 
 void
      pHPCCSQLLexer->LTH(pHPCCSQLLexer)
 *  - 
 void
      pHPCCSQLLexer->UNDERSCORE(pHPCCSQLLexer)
 *  - 
 void
      pHPCCSQLLexer->DCOLON(pHPCCSQLLexer)
 *  - 
 void
      pHPCCSQLLexer->DEFSCOPE(pHPCCSQLLexer)
 *  - 
 void
      pHPCCSQLLexer->LETTER_FRAGMENT(pHPCCSQLLexer)
 *  - 
 void
      pHPCCSQLLexer->INTEGER_NUM(pHPCCSQLLexer)
 *  - 
 void
      pHPCCSQLLexer->DIGIT_FRAGMENT(pHPCCSQLLexer)
 *  - 
 void
      pHPCCSQLLexer->HEX_DIGIT_FRAGMENT(pHPCCSQLLexer)
 *  - 
 void
      pHPCCSQLLexer->HEX_DIGIT(pHPCCSQLLexer)
 *  - 
 void
      pHPCCSQLLexer->BIT_NUM(pHPCCSQLLexer)
 *  - 
 void
      pHPCCSQLLexer->REAL_NUMBER(pHPCCSQLLexer)
 *  - 
 void
      pHPCCSQLLexer->TEXT_STRING(pHPCCSQLLexer)
 *  - 
 void
      pHPCCSQLLexer->ABSOLUTE_FILE_ID_PREFIX(pHPCCSQLLexer)
 *  - 
 void
      pHPCCSQLLexer->ABSOLUTE_FILE_ID(pHPCCSQLLexer)
 *  - 
 void
      pHPCCSQLLexer->ID(pHPCCSQLLexer)
 *  - 
 void
      pHPCCSQLLexer->ID_FRAGMENT(pHPCCSQLLexer)
 *  - 
 void
      pHPCCSQLLexer->WHITE_SPACE(pHPCCSQLLexer)
 *  - 
 void
      pHPCCSQLLexer->Tokens(pHPCCSQLLexer)
 *
 * The return type for any particular rule is of course determined by the source
 * grammar file.
 */
// [The "BSD license"]
// Copyright (c) 2005-2009 Jim Idle, Temporal Wave LLC
// http://www.temporal-wave.com
// http://www.linkedin.com/in/jimidle
//
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
// 1. Redistributions of source code must retain the above copyright
//    notice, this list of conditions and the following disclaimer.
// 2. Redistributions in binary form must reproduce the above copyright
//    notice, this list of conditions and the following disclaimer in the
//    documentation and/or other materials provided with the distribution.
// 3. The name of the author may not be used to endorse or promote products
//    derived from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
// IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
// OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
// IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
// INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
// NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
// THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

#ifndef	_HPCCSQLLexer_H
#define _HPCCSQLLexer_H
/* =============================================================================
 * Standard antlr3 C runtime definitions
 */
#include    <antlr3.h>

/* End of standard antlr 3 runtime definitions
 * =============================================================================
 */



#ifdef __cplusplus
extern "C" {
#endif

// Forward declare the context typedef so that we can use it before it is
// properly defined. Delegators and delegates (from import statements) are
// interdependent and their context structures contain pointers to each other
// C only allows such things to be declared if you pre-declare the typedef.
//
typedef struct HPCCSQLLexer_Ctx_struct HPCCSQLLexer, * pHPCCSQLLexer;





#ifdef	ANTLR3_WINDOWS
// Disable: Unreferenced parameter,							- Rules with parameters that are not used
//          constant conditional,							- ANTLR realizes that a prediction is always true (synpred usually)
//          initialized but unused variable					- tree rewrite variables declared but not needed
//          Unreferenced local variable						- lexer rule declares but does not always use _type
//          potentially unitialized variable used			- retval always returned from a rule
//			unreferenced local function has been removed	- susually getTokenNames or freeScope, they can go without warnigns
//
// These are only really displayed at warning level /W4 but that is the code ideal I am aiming at
// and the codegen must generate some of these warnings by necessity, apart from 4100, which is
// usually generated when a parser rule is given a parameter that it does not use. Mostly though
// this is a matter of orthogonality hence I disable that one.
//
#pragma warning( disable : 4100 )
#pragma warning( disable : 4101 )
#pragma warning( disable : 4127 )
#pragma warning( disable : 4189 )
#pragma warning( disable : 4505 )
#pragma warning( disable : 4701 )
#endif

/** Context tracking structure for 
HPCCSQLLexer

 */
struct HPCCSQLLexer_Ctx_struct
{
    /** Built in ANTLR3 context tracker contains all the generic elements
     *  required for context tracking.
     */
    pANTLR3_LEXER    pLexer;

     void
     (*mT__230)	(struct HPCCSQLLexer_Ctx_struct * ctx);

     void
     (*mT__231)	(struct HPCCSQLLexer_Ctx_struct * ctx);

     void
     (*mT__232)	(struct HPCCSQLLexer_Ctx_struct * ctx);

     void
     (*mAi)	(struct HPCCSQLLexer_Ctx_struct * ctx);

     void
     (*mBi)	(struct HPCCSQLLexer_Ctx_struct * ctx);

     void
     (*mCi)	(struct HPCCSQLLexer_Ctx_struct * ctx);

     void
     (*mDi)	(struct HPCCSQLLexer_Ctx_struct * ctx);

     void
     (*mEi)	(struct HPCCSQLLexer_Ctx_struct * ctx);

     void
     (*mFi)	(struct HPCCSQLLexer_Ctx_struct * ctx);

     void
     (*mGi)	(struct HPCCSQLLexer_Ctx_struct * ctx);

     void
     (*mHi)	(struct HPCCSQLLexer_Ctx_struct * ctx);

     void
     (*mIi)	(struct HPCCSQLLexer_Ctx_struct * ctx);

     void
     (*mJi)	(struct HPCCSQLLexer_Ctx_struct * ctx);

     void
     (*mKi)	(struct HPCCSQLLexer_Ctx_struct * ctx);

     void
     (*mLi)	(struct HPCCSQLLexer_Ctx_struct * ctx);

     void
     (*mMi)	(struct HPCCSQLLexer_Ctx_struct * ctx);

     void
     (*mNi)	(struct HPCCSQLLexer_Ctx_struct * ctx);

     void
     (*mOi)	(struct HPCCSQLLexer_Ctx_struct * ctx);

     void
     (*mPi)	(struct HPCCSQLLexer_Ctx_struct * ctx);

     void
     (*mQi)	(struct HPCCSQLLexer_Ctx_struct * ctx);

     void
     (*mRi)	(struct HPCCSQLLexer_Ctx_struct * ctx);

     void
     (*mSi)	(struct HPCCSQLLexer_Ctx_struct * ctx);

     void
     (*mTi)	(struct HPCCSQLLexer_Ctx_struct * ctx);

     void
     (*mUi)	(struct HPCCSQLLexer_Ctx_struct * ctx);

     void
     (*mVi)	(struct HPCCSQLLexer_Ctx_struct * ctx);

     void
     (*mWi)	(struct HPCCSQLLexer_Ctx_struct * ctx);

     void
     (*mXi)	(struct HPCCSQLLexer_Ctx_struct * ctx);

     void
     (*mYi)	(struct HPCCSQLLexer_Ctx_struct * ctx);

     void
     (*mZi)	(struct HPCCSQLLexer_Ctx_struct * ctx);

     void
     (*mADD_SYM)	(struct HPCCSQLLexer_Ctx_struct * ctx);

     void
     (*mALL)	(struct HPCCSQLLexer_Ctx_struct * ctx);

     void
     (*mANY)	(struct HPCCSQLLexer_Ctx_struct * ctx);

     void
     (*mAS_SYM)	(struct HPCCSQLLexer_Ctx_struct * ctx);

     void
     (*mASC)	(struct HPCCSQLLexer_Ctx_struct * ctx);

     void
     (*mASCII_SYM)	(struct HPCCSQLLexer_Ctx_struct * ctx);

     void
     (*mAT_SYM)	(struct HPCCSQLLexer_Ctx_struct * ctx);

     void
     (*mAVG)	(struct HPCCSQLLexer_Ctx_struct * ctx);

     void
     (*mBETWEEN)	(struct HPCCSQLLexer_Ctx_struct * ctx);

     void
     (*mBINARY_SYM)	(struct HPCCSQLLexer_Ctx_struct * ctx);

     void
     (*mBIT_SYM)	(struct HPCCSQLLexer_Ctx_struct * ctx);

     void
     (*mBOOL_SYM)	(struct HPCCSQLLexer_Ctx_struct * ctx);

     void
     (*mBOOLEAN_SYM)	(struct HPCCSQLLexer_Ctx_struct * ctx);

     void
     (*mBY_SYM)	(struct HPCCSQLLexer_Ctx_struct * ctx);

     void
     (*mCALL_SYM)	(struct HPCCSQLLexer_Ctx_struct * ctx);

     void
     (*mCREATE_SYM)	(struct HPCCSQLLexer_Ctx_struct * ctx);

     void
     (*mCOLUMN_SYM)	(struct HPCCSQLLexer_Ctx_struct * ctx);

     void
     (*mCOMMENT_SYM)	(struct HPCCSQLLexer_Ctx_struct * ctx);

     void
     (*mCONTAINS_SYM)	(struct HPCCSQLLexer_Ctx_struct * ctx);

     void
     (*mCOUNT)	(struct HPCCSQLLexer_Ctx_struct * ctx);

     void
     (*mDATA_SYM)	(struct HPCCSQLLexer_Ctx_struct * ctx);

     void
     (*mDESC)	(struct HPCCSQLLexer_Ctx_struct * ctx);

     void
     (*mDISTINCT)	(struct HPCCSQLLexer_Ctx_struct * ctx);

     void
     (*mEXISTS_SYM)	(struct HPCCSQLLexer_Ctx_struct * ctx);

     void
     (*mFALSE_SYM)	(struct HPCCSQLLexer_Ctx_struct * ctx);

     void
     (*mFOR_SYM)	(struct HPCCSQLLexer_Ctx_struct * ctx);

     void
     (*mFROM)	(struct HPCCSQLLexer_Ctx_struct * ctx);

     void
     (*mGROUP_SYM)	(struct HPCCSQLLexer_Ctx_struct * ctx);

     void
     (*mHAVING)	(struct HPCCSQLLexer_Ctx_struct * ctx);

     void
     (*mIF_SYM)	(struct HPCCSQLLexer_Ctx_struct * ctx);

     void
     (*mIGNORE_SYM)	(struct HPCCSQLLexer_Ctx_struct * ctx);

     void
     (*mIN_SYM)	(struct HPCCSQLLexer_Ctx_struct * ctx);

     void
     (*mINFILE_SYM)	(struct HPCCSQLLexer_Ctx_struct * ctx);

     void
     (*mINTO_SYM)	(struct HPCCSQLLexer_Ctx_struct * ctx);

     void
     (*mINT_SYM)	(struct HPCCSQLLexer_Ctx_struct * ctx);

     void
     (*mINTEGER_SYM)	(struct HPCCSQLLexer_Ctx_struct * ctx);

     void
     (*mINDEX_SYM)	(struct HPCCSQLLexer_Ctx_struct * ctx);

     void
     (*mINNER_SYM)	(struct HPCCSQLLexer_Ctx_struct * ctx);

     void
     (*mIS_SYM)	(struct HPCCSQLLexer_Ctx_struct * ctx);

     void
     (*mJOIN_SYM)	(struct HPCCSQLLexer_Ctx_struct * ctx);

     void
     (*mKEY_SYM)	(struct HPCCSQLLexer_Ctx_struct * ctx);

     void
     (*mKEYS)	(struct HPCCSQLLexer_Ctx_struct * ctx);

     void
     (*mLAST_SYM)	(struct HPCCSQLLexer_Ctx_struct * ctx);

     void
     (*mLEFT)	(struct HPCCSQLLexer_Ctx_struct * ctx);

     void
     (*mLIMIT)	(struct HPCCSQLLexer_Ctx_struct * ctx);

     void
     (*mLOAD_SYM)	(struct HPCCSQLLexer_Ctx_struct * ctx);

     void
     (*mLOCAL_SYM)	(struct HPCCSQLLexer_Ctx_struct * ctx);

     void
     (*mLOWER)	(struct HPCCSQLLexer_Ctx_struct * ctx);

     void
     (*mMAX_SYM)	(struct HPCCSQLLexer_Ctx_struct * ctx);

     void
     (*mMEDIUMINT)	(struct HPCCSQLLexer_Ctx_struct * ctx);

     void
     (*mMIN_SYM)	(struct HPCCSQLLexer_Ctx_struct * ctx);

     void
     (*mMOD)	(struct HPCCSQLLexer_Ctx_struct * ctx);

     void
     (*mNOT_SYM)	(struct HPCCSQLLexer_Ctx_struct * ctx);

     void
     (*mNULL_SYM)	(struct HPCCSQLLexer_Ctx_struct * ctx);

     void
     (*mOFFSET_SYM)	(struct HPCCSQLLexer_Ctx_struct * ctx);

     void
     (*mON)	(struct HPCCSQLLexer_Ctx_struct * ctx);

     void
     (*mORDER_SYM)	(struct HPCCSQLLexer_Ctx_struct * ctx);

     void
     (*mOUT_SYM)	(struct HPCCSQLLexer_Ctx_struct * ctx);

     void
     (*mOUTER)	(struct HPCCSQLLexer_Ctx_struct * ctx);

     void
     (*mPOWER)	(struct HPCCSQLLexer_Ctx_struct * ctx);

     void
     (*mREPLACE_SYM)	(struct HPCCSQLLexer_Ctx_struct * ctx);

     void
     (*mSELECT)	(struct HPCCSQLLexer_Ctx_struct * ctx);

     void
     (*mSMALLINT)	(struct HPCCSQLLexer_Ctx_struct * ctx);

     void
     (*mSUM)	(struct HPCCSQLLexer_Ctx_struct * ctx);

     void
     (*mTABLE_SYM)	(struct HPCCSQLLexer_Ctx_struct * ctx);

     void
     (*mTINYINT)	(struct HPCCSQLLexer_Ctx_struct * ctx);

     void
     (*mTRUE_SYM)	(struct HPCCSQLLexer_Ctx_struct * ctx);

     void
     (*mTYPE_SYM)	(struct HPCCSQLLexer_Ctx_struct * ctx);

     void
     (*mUPPER)	(struct HPCCSQLLexer_Ctx_struct * ctx);

     void
     (*mUSE_SYM)	(struct HPCCSQLLexer_Ctx_struct * ctx);

     void
     (*mUTF8_SYM)	(struct HPCCSQLLexer_Ctx_struct * ctx);

     void
     (*mUNSIGNED_SYM)	(struct HPCCSQLLexer_Ctx_struct * ctx);

     void
     (*mWHERE)	(struct HPCCSQLLexer_Ctx_struct * ctx);

     void
     (*mXOR)	(struct HPCCSQLLexer_Ctx_struct * ctx);

     void
     (*mBIGINT_SYM)	(struct HPCCSQLLexer_Ctx_struct * ctx);

     void
     (*mREAL_SYM)	(struct HPCCSQLLexer_Ctx_struct * ctx);

     void
     (*mDOUBLE_SYM)	(struct HPCCSQLLexer_Ctx_struct * ctx);

     void
     (*mFLOAT_SYM)	(struct HPCCSQLLexer_Ctx_struct * ctx);

     void
     (*mDECIMAL_SYM)	(struct HPCCSQLLexer_Ctx_struct * ctx);

     void
     (*mNUMERIC_SYM)	(struct HPCCSQLLexer_Ctx_struct * ctx);

     void
     (*mDATE_SYM)	(struct HPCCSQLLexer_Ctx_struct * ctx);

     void
     (*mTIME_SYM)	(struct HPCCSQLLexer_Ctx_struct * ctx);

     void
     (*mTIMESTAMP_SYM)	(struct HPCCSQLLexer_Ctx_struct * ctx);

     void
     (*mDATETIME_SYM)	(struct HPCCSQLLexer_Ctx_struct * ctx);

     void
     (*mYEAR_SYM)	(struct HPCCSQLLexer_Ctx_struct * ctx);

     void
     (*mCHAR_SYM)	(struct HPCCSQLLexer_Ctx_struct * ctx);

     void
     (*mVARCHAR_SYM)	(struct HPCCSQLLexer_Ctx_struct * ctx);

     void
     (*mVARBINARY_SYM)	(struct HPCCSQLLexer_Ctx_struct * ctx);

     void
     (*mTINYBLOB_SYM)	(struct HPCCSQLLexer_Ctx_struct * ctx);

     void
     (*mBLOB_SYM)	(struct HPCCSQLLexer_Ctx_struct * ctx);

     void
     (*mMEDIUMBLOB_SYM)	(struct HPCCSQLLexer_Ctx_struct * ctx);

     void
     (*mLONGBLOB_SYM)	(struct HPCCSQLLexer_Ctx_struct * ctx);

     void
     (*mTINYTEXT_SYM)	(struct HPCCSQLLexer_Ctx_struct * ctx);

     void
     (*mTEXT_SYM)	(struct HPCCSQLLexer_Ctx_struct * ctx);

     void
     (*mMEDIUMTEXT_SYM)	(struct HPCCSQLLexer_Ctx_struct * ctx);

     void
     (*mLONGTEXT_SYM)	(struct HPCCSQLLexer_Ctx_struct * ctx);

     void
     (*mENUM_SYM)	(struct HPCCSQLLexer_Ctx_struct * ctx);

     void
     (*mSET_SYM)	(struct HPCCSQLLexer_Ctx_struct * ctx);

     void
     (*mFLAT_SYM)	(struct HPCCSQLLexer_Ctx_struct * ctx);

     void
     (*mXML_SYM)	(struct HPCCSQLLexer_Ctx_struct * ctx);

     void
     (*mCSV_SYM)	(struct HPCCSQLLexer_Ctx_struct * ctx);

     void
     (*mJSON_SYM)	(struct HPCCSQLLexer_Ctx_struct * ctx);

     void
     (*mCONNECTION_SYM)	(struct HPCCSQLLexer_Ctx_struct * ctx);

     void
     (*mDIRECTORY_SYM)	(struct HPCCSQLLexer_Ctx_struct * ctx);

     void
     (*mENCLOSED_SYM)	(struct HPCCSQLLexer_Ctx_struct * ctx);

     void
     (*mLINES_SYM)	(struct HPCCSQLLexer_Ctx_struct * ctx);

     void
     (*mESCAPED_SYM)	(struct HPCCSQLLexer_Ctx_struct * ctx);

     void
     (*mTERMINATED_SYM)	(struct HPCCSQLLexer_Ctx_struct * ctx);

     void
     (*mOPTIONALLY_SYM)	(struct HPCCSQLLexer_Ctx_struct * ctx);

     void
     (*mEBCDIC_SYM)	(struct HPCCSQLLexer_Ctx_struct * ctx);

     void
     (*mFIELDS_SYM)	(struct HPCCSQLLexer_Ctx_struct * ctx);

     void
     (*mCOLUMNS_SYM)	(struct HPCCSQLLexer_Ctx_struct * ctx);

     void
     (*mCHARACTER_SET)	(struct HPCCSQLLexer_Ctx_struct * ctx);

     void
     (*mIFNOTEXISTS)	(struct HPCCSQLLexer_Ctx_struct * ctx);

     void
     (*mISNOTNULL)	(struct HPCCSQLLexer_Ctx_struct * ctx);

     void
     (*mISNULL)	(struct HPCCSQLLexer_Ctx_struct * ctx);

     void
     (*mNOT_IN)	(struct HPCCSQLLexer_Ctx_struct * ctx);

     void
     (*mDIVIDE)	(struct HPCCSQLLexer_Ctx_struct * ctx);

     void
     (*mMOD_SYM)	(struct HPCCSQLLexer_Ctx_struct * ctx);

     void
     (*mOR_SYM)	(struct HPCCSQLLexer_Ctx_struct * ctx);

     void
     (*mAND_SYM)	(struct HPCCSQLLexer_Ctx_struct * ctx);

     void
     (*mARROW)	(struct HPCCSQLLexer_Ctx_struct * ctx);

     void
     (*mEQ_SYM)	(struct HPCCSQLLexer_Ctx_struct * ctx);

     void
     (*mNOT_EQ)	(struct HPCCSQLLexer_Ctx_struct * ctx);

     void
     (*mLET)	(struct HPCCSQLLexer_Ctx_struct * ctx);

     void
     (*mGET)	(struct HPCCSQLLexer_Ctx_struct * ctx);

     void
     (*mSET_VAR)	(struct HPCCSQLLexer_Ctx_struct * ctx);

     void
     (*mSHIFT_LEFT)	(struct HPCCSQLLexer_Ctx_struct * ctx);

     void
     (*mSHIFT_RIGHT)	(struct HPCCSQLLexer_Ctx_struct * ctx);

     void
     (*mSQUOTE)	(struct HPCCSQLLexer_Ctx_struct * ctx);

     void
     (*mDQUOTE)	(struct HPCCSQLLexer_Ctx_struct * ctx);

     void
     (*mDOLLAR)	(struct HPCCSQLLexer_Ctx_struct * ctx);

     void
     (*mQUESTION)	(struct HPCCSQLLexer_Ctx_struct * ctx);

     void
     (*mSEMI)	(struct HPCCSQLLexer_Ctx_struct * ctx);

     void
     (*mCOLON)	(struct HPCCSQLLexer_Ctx_struct * ctx);

     void
     (*mDOT)	(struct HPCCSQLLexer_Ctx_struct * ctx);

     void
     (*mCOMMA)	(struct HPCCSQLLexer_Ctx_struct * ctx);

     void
     (*mASTERISK)	(struct HPCCSQLLexer_Ctx_struct * ctx);

     void
     (*mRPAREN)	(struct HPCCSQLLexer_Ctx_struct * ctx);

     void
     (*mLPAREN)	(struct HPCCSQLLexer_Ctx_struct * ctx);

     void
     (*mRBRACK)	(struct HPCCSQLLexer_Ctx_struct * ctx);

     void
     (*mLBRACK)	(struct HPCCSQLLexer_Ctx_struct * ctx);

     void
     (*mLCURLY)	(struct HPCCSQLLexer_Ctx_struct * ctx);

     void
     (*mRCURLY)	(struct HPCCSQLLexer_Ctx_struct * ctx);

     void
     (*mPLUS)	(struct HPCCSQLLexer_Ctx_struct * ctx);

     void
     (*mMINUS)	(struct HPCCSQLLexer_Ctx_struct * ctx);

     void
     (*mNEGATION)	(struct HPCCSQLLexer_Ctx_struct * ctx);

     void
     (*mVERTBAR)	(struct HPCCSQLLexer_Ctx_struct * ctx);

     void
     (*mBITAND)	(struct HPCCSQLLexer_Ctx_struct * ctx);

     void
     (*mPOWER_OP)	(struct HPCCSQLLexer_Ctx_struct * ctx);

     void
     (*mGTH)	(struct HPCCSQLLexer_Ctx_struct * ctx);

     void
     (*mLTH)	(struct HPCCSQLLexer_Ctx_struct * ctx);

     void
     (*mUNDERSCORE)	(struct HPCCSQLLexer_Ctx_struct * ctx);

     void
     (*mDCOLON)	(struct HPCCSQLLexer_Ctx_struct * ctx);

     void
     (*mDEFSCOPE)	(struct HPCCSQLLexer_Ctx_struct * ctx);

     void
     (*mLETTER_FRAGMENT)	(struct HPCCSQLLexer_Ctx_struct * ctx);

     void
     (*mINTEGER_NUM)	(struct HPCCSQLLexer_Ctx_struct * ctx);

     void
     (*mDIGIT_FRAGMENT)	(struct HPCCSQLLexer_Ctx_struct * ctx);

     void
     (*mHEX_DIGIT_FRAGMENT)	(struct HPCCSQLLexer_Ctx_struct * ctx);

     void
     (*mHEX_DIGIT)	(struct HPCCSQLLexer_Ctx_struct * ctx);

     void
     (*mBIT_NUM)	(struct HPCCSQLLexer_Ctx_struct * ctx);

     void
     (*mREAL_NUMBER)	(struct HPCCSQLLexer_Ctx_struct * ctx);

     void
     (*mTEXT_STRING)	(struct HPCCSQLLexer_Ctx_struct * ctx);

     void
     (*mABSOLUTE_FILE_ID_PREFIX)	(struct HPCCSQLLexer_Ctx_struct * ctx);

     void
     (*mABSOLUTE_FILE_ID)	(struct HPCCSQLLexer_Ctx_struct * ctx);

     void
     (*mID)	(struct HPCCSQLLexer_Ctx_struct * ctx);

     void
     (*mID_FRAGMENT)	(struct HPCCSQLLexer_Ctx_struct * ctx);

     void
     (*mWHITE_SPACE)	(struct HPCCSQLLexer_Ctx_struct * ctx);

     void
     (*mTokens)	(struct HPCCSQLLexer_Ctx_struct * ctx);
    const char * (*getGrammarFileName)();
    void            (*reset)  (struct HPCCSQLLexer_Ctx_struct * ctx);
    void	    (*free)   (struct HPCCSQLLexer_Ctx_struct * ctx);
};

// Function protoypes for the constructor functions that external translation units
// such as delegators and delegates may wish to call.
//
ANTLR3_API pHPCCSQLLexer HPCCSQLLexerNew         (
pANTLR3_INPUT_STREAM
 instream);
ANTLR3_API pHPCCSQLLexer HPCCSQLLexerNewSSD      (
pANTLR3_INPUT_STREAM
 instream, pANTLR3_RECOGNIZER_SHARED_STATE state);

/** Symbolic definitions of all the tokens that the 
lexer
 will work with.
 * \{
 *
 * Antlr will define EOF, but we can't use that as it it is too common in
 * in C header files and that would be confusing. There is no way to filter this out at the moment
 * so we just undef it here for now. That isn't the value we get back from C recognizers
 * anyway. We are looking for ANTLR3_TOKEN_EOF.
 */
#ifdef	EOF
#undef	EOF
#endif
#ifdef	Tokens
#undef	Tokens
#endif
#define EOF      -1
#define T__230      230
#define T__231      231
#define T__232      232
#define ABSOLUTE_FILE_ID      4
#define ABSOLUTE_FILE_ID_PREFIX      5
#define ADD_SYM      6
#define ALL      7
#define AND_SYM      8
#define ANY      9
#define ARROW      10
#define ASC      11
#define ASCII_SYM      12
#define ASTERISK      13
#define AS_SYM      14
#define AT_SYM      15
#define AVG      16
#define Ai      17
#define BETWEEN      18
#define BIGINT_SYM      19
#define BINARY_SYM      20
#define BITAND      21
#define BIT_NUM      22
#define BIT_SYM      23
#define BLOB_SYM      24
#define BOOLEAN_SYM      25
#define BOOL_SYM      26
#define BY_SYM      27
#define Bi      28
#define CALL_SYM      29
#define CHARACTER_SET      30
#define CHAR_SYM      31
#define COLON      32
#define COLUMNS_SYM      33
#define COLUMN_SYM      34
#define COMMA      35
#define COMMENT_SYM      36
#define CONNECTION_SYM      37
#define CONTAINS_SYM      38
#define COUNT      39
#define CREATE_SYM      40
#define CSV_SYM      41
#define Ci      42
#define DATA_SYM      43
#define DATETIME_SYM      44
#define DATE_SYM      45
#define DCOLON      46
#define DECIMAL_SYM      47
#define DEFSCOPE      48
#define DESC      49
#define DIGIT_FRAGMENT      50
#define DIRECTORY_SYM      51
#define DISTINCT      52
#define DIVIDE      53
#define DOLLAR      54
#define DOT      55
#define DOUBLE_SYM      56
#define DQUOTE      57
#define Di      58
#define EBCDIC_SYM      59
#define ENCLOSED_SYM      60
#define ENUM_SYM      61
#define EQ_SYM      62
#define ESCAPED_SYM      63
#define EXISTS_SYM      64
#define Ei      65
#define FALSE_SYM      66
#define FIELDS_SYM      67
#define FLAT_SYM      68
#define FLOAT_SYM      69
#define FOR_SYM      70
#define FROM      71
#define Fi      72
#define GET      73
#define GROUP_SYM      74
#define GTH      75
#define Gi      76
#define HAVING      77
#define HEX_DIGIT      78
#define HEX_DIGIT_FRAGMENT      79
#define Hi      80
#define ID      81
#define ID_FRAGMENT      82
#define IFNOTEXISTS      83
#define IF_SYM      84
#define IGNORE_SYM      85
#define INDEX_SYM      86
#define INFILE_SYM      87
#define INNER_SYM      88
#define INTEGER_NUM      89
#define INTEGER_SYM      90
#define INTO_SYM      91
#define INT_SYM      92
#define IN_SYM      93
#define ISNOTNULL      94
#define ISNULL      95
#define IS_SYM      96
#define Ii      97
#define JOIN_SYM      98
#define JSON_SYM      99
#define Ji      100
#define KEYS      101
#define KEY_SYM      102
#define Ki      103
#define LAST_SYM      104
#define LBRACK      105
#define LCURLY      106
#define LEFT      107
#define LET      108
#define LETTER_FRAGMENT      109
#define LIMIT      110
#define LINES_SYM      111
#define LOAD_SYM      112
#define LOCAL_SYM      113
#define LONGBLOB_SYM      114
#define LONGTEXT_SYM      115
#define LOWER      116
#define LPAREN      117
#define LTH      118
#define Li      119
#define MAX_SYM      120
#define MEDIUMBLOB_SYM      121
#define MEDIUMINT      122
#define MEDIUMTEXT_SYM      123
#define MINUS      124
#define MIN_SYM      125
#define MOD      126
#define MOD_SYM      127
#define Mi      128
#define NEGATION      129
#define NOT_EQ      130
#define NOT_IN      131
#define NOT_SYM      132
#define NULL_SYM      133
#define NUMERIC_SYM      134
#define Ni      135
#define OFFSET_SYM      136
#define ON      137
#define OPTIONALLY_SYM      138
#define ORDER_SYM      139
#define OR_SYM      140
#define OUTER      141
#define OUT_SYM      142
#define Oi      143
#define PLUS      144
#define POWER      145
#define POWER_OP      146
#define Pi      147
#define QUESTION      148
#define Qi      149
#define RBRACK      150
#define RCURLY      151
#define REAL_NUMBER      152
#define REAL_SYM      153
#define REPLACE_SYM      154
#define RPAREN      155
#define Ri      156
#define SELECT      157
#define SEMI      158
#define SET_SYM      159
#define SET_VAR      160
#define SHIFT_LEFT      161
#define SHIFT_RIGHT      162
#define SMALLINT      163
#define SQUOTE      164
#define SUM      165
#define Si      166
#define TABLE_SYM      167
#define TERMINATED_SYM      168
#define TEXT_STRING      169
#define TEXT_SYM      170
#define TIMESTAMP_SYM      171
#define TIME_SYM      172
#define TINYBLOB_SYM      173
#define TINYINT      174
#define TINYTEXT_SYM      175
#define TOKEN_ALIAS      176
#define TOKEN_AVOID_INDEX      177
#define TOKEN_CALL_STATEMENT      178
#define TOKEN_COLUMN      179
#define TOKEN_COLUMNWILDCARD      180
#define TOKEN_COLUMN_DEF      181
#define TOKEN_COLUMN_DEF_LIST      182
#define TOKEN_CREATE_INDEX_STATEMENT      183
#define TOKEN_CREATE_LOAD_TABLE_STATEMENT      184
#define TOKEN_CREATE_TABLE      185
#define TOKEN_DONOT_OVERWRITE      186
#define TOKEN_FROM_LIST      187
#define TOKEN_FROM_TABLE      188
#define TOKEN_FUNCEXP      189
#define TOKEN_INDEX_HINT      190
#define TOKEN_INNER_JOIN      191
#define TOKEN_LANDING_ZONE      192
#define TOKEN_LISTEXP      193
#define TOKEN_LOAD_TABLE      194
#define TOKEN_OUTTER_JOIN      195
#define TOKEN_OVERWRITE      196
#define TOKEN_PARAMPLACEHOLDER      197
#define TOKEN_PROC_NAME      198
#define TOKEN_PROC_PARAMS      199
#define TOKEN_ROOT      200
#define TOKEN_SELECT_STATEMENT      201
#define TOKEN_TABLE_SCHEMA      202
#define TOKEN_VARIABLE_FILE      203
#define TOKEN_VAR_ENCLOSED      204
#define TOKEN_VAR_ESCAPED      205
#define TOKEN_VAR_SEPERATOR      206
#define TOKEN_VAR_TERMINATOR      207
#define TRUE_SYM      208
#define TYPE_SYM      209
#define Ti      210
#define UNDERSCORE      211
#define UNSIGNED_SYM      212
#define UPPER      213
#define USE_SYM      214
#define UTF8_SYM      215
#define Ui      216
#define VARBINARY_SYM      217
#define VARCHAR_SYM      218
#define VERTBAR      219
#define Vi      220
#define WHERE      221
#define WHITE_SPACE      222
#define Wi      223
#define XML_SYM      224
#define XOR      225
#define Xi      226
#define YEAR_SYM      227
#define Yi      228
#define Zi      229
#ifdef	EOF
#undef	EOF
#define	EOF	ANTLR3_TOKEN_EOF
#endif

#ifndef TOKENSOURCE
#define TOKENSOURCE(lxr) lxr->pLexer->rec->state->tokSource
#endif

/* End of token definitions for HPCCSQLLexer
 * =============================================================================
 */
/** } */

#ifdef __cplusplus
}
#endif

#endif

/* END - Note:Keep extra line feed to satisfy UNIX systems */
